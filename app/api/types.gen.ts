// This file is auto-generated by @hey-api/openapi-ts

export type API_Status = {
    /**
     * Year of the current FRC season.
     */
    current_season: number;
    /**
     * Maximum FRC season year for valid queries.
     */
    max_season: number;
    /**
     * True if the entire FMS API provided by FIRST is down.
     */
    is_datafeed_down: boolean;
    /**
     * An array of strings containing event keys of any active events that are no longer updating.
     */
    down_events: Array<(string)>;
    ios: API_Status_App_Version;
    android: API_Status_App_Version;
};

export type API_Status_App_Version = {
    /**
     * Internal use - Minimum application version required to correctly connect and process data.
     */
    min_app_version: number;
    /**
     * Internal use - Latest application version available.
     */
    latest_app_version: number;
};

export type Team_Simple = {
    /**
     * TBA team key with the format `frcXXXX` with `XXXX` representing the team number.
     */
    key: string;
    /**
     * Official team number issued by FIRST.
     */
    team_number: number;
    /**
     * Team nickname provided by FIRST.
     */
    nickname?: string;
    /**
     * Official long name registered with FIRST.
     */
    name: string;
    /**
     * City of team derived from parsing the address registered with FIRST.
     */
    city?: string;
    /**
     * State of team derived from parsing the address registered with FIRST.
     */
    state_prov?: string;
    /**
     * Country of team derived from parsing the address registered with FIRST.
     */
    country?: string;
};

export type Team = {
    /**
     * TBA team key with the format `frcXXXX` with `XXXX` representing the team number.
     */
    key: string;
    /**
     * Official team number issued by FIRST.
     */
    team_number: number;
    /**
     * Team nickname provided by FIRST.
     */
    nickname?: string;
    /**
     * Official long name registered with FIRST.
     */
    name: string;
    /**
     * Name of team school or affilited group registered with FIRST.
     */
    school_name?: string;
    /**
     * City of team derived from parsing the address registered with FIRST.
     */
    city?: string;
    /**
     * State of team derived from parsing the address registered with FIRST.
     */
    state_prov?: string;
    /**
     * Country of team derived from parsing the address registered with FIRST.
     */
    country?: string;
    /**
     * Will be NULL, for future development.
     */
    address?: string;
    /**
     * Postal code from the team address.
     */
    postal_code?: string;
    /**
     * Will be NULL, for future development.
     */
    gmaps_place_id?: string;
    /**
     * Will be NULL, for future development.
     */
    gmaps_url?: string;
    /**
     * Will be NULL, for future development.
     */
    lat?: number;
    /**
     * Will be NULL, for future development.
     */
    lng?: number;
    /**
     * Will be NULL, for future development.
     */
    location_name?: string;
    /**
     * Official website associated with the team.
     */
    website?: string;
    /**
     * First year the team officially competed.
     */
    rookie_year?: number;
    /**
     * Team's motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019.
     */
    motto?: string;
    /**
     * Location of the team's home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value.
     */
    home_championship?: unknown;
};

export type Team_Robot = {
    /**
     * Year this robot competed in.
     */
    year: number;
    /**
     * Name of the robot as provided by the team.
     */
    robot_name: string;
    /**
     * Internal TBA identifier for this robot.
     */
    key: string;
    /**
     * TBA team key for this robot.
     */
    team_key: string;
};

export type Event_Simple = {
    /**
     * TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
     */
    key: string;
    /**
     * Official name of event on record either provided by FIRST or organizers of offseason event.
     */
    name: string;
    /**
     * Event short code, as provided by FIRST.
     */
    event_code: string;
    /**
     * Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
     */
    event_type: number;
    district?: District_List;
    /**
     * City, town, village, etc. the event is located in.
     */
    city?: string;
    /**
     * State or Province the event is located in.
     */
    state_prov?: string;
    /**
     * Country the event is located in.
     */
    country?: string;
    /**
     * Event start date in `yyyy-mm-dd` format.
     */
    start_date: string;
    /**
     * Event end date in `yyyy-mm-dd` format.
     */
    end_date: string;
    /**
     * Year the event data is for.
     */
    year: number;
};

export type Event = {
    /**
     * TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
     */
    key: string;
    /**
     * Official name of event on record either provided by FIRST or organizers of offseason event.
     */
    name: string;
    /**
     * Event short code, as provided by FIRST.
     */
    event_code: string;
    /**
     * Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
     */
    event_type: number;
    district?: District_List;
    /**
     * City, town, village, etc. the event is located in.
     */
    city?: string;
    /**
     * State or Province the event is located in.
     */
    state_prov?: string;
    /**
     * Country the event is located in.
     */
    country?: string;
    /**
     * Event start date in `yyyy-mm-dd` format.
     */
    start_date: string;
    /**
     * Event end date in `yyyy-mm-dd` format.
     */
    end_date: string;
    /**
     * Year the event data is for.
     */
    year: number;
    /**
     * Same as `name` but doesn't include event specifiers, such as 'Regional' or 'District'. May be null.
     */
    short_name?: string;
    /**
     * Event Type, eg Regional, District, or Offseason.
     */
    event_type_string: string;
    /**
     * Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 'preseason' event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)
     */
    week?: number;
    /**
     * Address of the event's venue, if available.
     */
    address?: string;
    /**
     * Postal code from the event address.
     */
    postal_code?: string;
    /**
     * Google Maps Place ID for the event address.
     */
    gmaps_place_id?: string;
    /**
     * Link to address location on Google Maps.
     */
    gmaps_url?: string;
    /**
     * Latitude for the event address.
     */
    lat?: number;
    /**
     * Longitude for the event address.
     */
    lng?: number;
    /**
     * Name of the location at the address for the event, eg. Blue Alliance High School.
     */
    location_name?: string;
    /**
     * Timezone name.
     */
    timezone?: string;
    /**
     * The event's website, if any.
     */
    website?: string;
    /**
     * The FIRST internal Event ID, used to link to the event on the FRC webpage.
     */
    first_event_id?: string;
    /**
     * Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)
     */
    first_event_code?: string;
    webcasts?: Array<Webcast>;
    /**
     * An array of event keys for the divisions at this event.
     */
    division_keys?: Array<(string)>;
    /**
     * The TBA Event key that represents the event's parent. Used to link back to the event from a division event. It is also the inverse relation of `divison_keys`.
     */
    parent_event_key?: string;
    /**
     * Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null.
     */
    playoff_type?: number;
    /**
     * String representation of the `playoff_type`, or null.
     */
    playoff_type_string?: string;
};

export type Team_Event_Status = {
    qual?: Team_Event_Status_rank;
    alliance?: Team_Event_Status_alliance;
    playoff?: Team_Event_Status_playoff;
    /**
     * An HTML formatted string suitable for display to the user containing the team's alliance pick status.
     */
    alliance_status_str?: string;
    /**
     * An HTML formatter string suitable for display to the user containing the team's playoff status.
     */
    playoff_status_str?: string;
    /**
     * An HTML formatted string suitable for display to the user containing the team's overall status summary of the event.
     */
    overall_status_str?: string;
    /**
     * TBA match key for the next match the team is scheduled to play in at this event, or null.
     */
    next_match_key?: string;
    /**
     * TBA match key for the last match the team played in at this event, or null.
     */
    last_match_key?: string;
};

export type Team_Event_Status_rank = {
    /**
     * Number of teams ranked.
     */
    num_teams?: number;
    ranking?: {
        /**
         * Number of matches played.
         */
        matches_played?: number;
        /**
         * For some years, average qualification score. Can be null.
         */
        qual_average?: number;
        /**
         * Ordered list of values used to determine the rank. See the `sort_order_info` property for the name of each value.
         */
        sort_orders?: Array<(number)>;
        record?: WLT_Record;
        /**
         * Relative rank of this team.
         */
        rank?: number;
        /**
         * Number of matches the team was disqualified for.
         */
        dq?: number;
        /**
         * TBA team key for this rank.
         */
        team_key?: string;
    };
    /**
     * Ordered list of names corresponding to the elements of the `sort_orders` array.
     */
    sort_order_info?: Array<{
        /**
         * The number of digits of precision used for this value, eg `2` would correspond to a value of `101.11` while `0` would correspond to `101`.
         */
        precision?: number;
        /**
         * The descriptive name of the value used to sort the ranking.
         */
        name?: string;
    }>;
    status?: string;
};

export type Team_Event_Status_alliance = {
    /**
     * Alliance name, may be null.
     */
    name?: string;
    /**
     * Alliance number.
     */
    number: number;
    backup?: Team_Event_Status_alliance_backup;
    /**
     * Order the team was picked in the alliance from 0-2, with 0 being alliance captain.
     */
    pick: number;
};

/**
 * Backup status, may be null.
 */
export type Team_Event_Status_alliance_backup = {
    /**
     * TBA key for the team replaced by the backup.
     */
    out?: string;
    /**
     * TBA key for the backup team called in.
     */
    in?: string;
};

/**
 * Playoff status for this team, may be null if the team did not make playoffs, or playoffs have not begun.
 */
export type Team_Event_Status_playoff = {
    /**
     * The highest playoff level the team reached.
     */
    level?: 'qm' | 'ef' | 'qf' | 'sf' | 'f';
    current_level_record?: WLT_Record;
    record?: WLT_Record;
    /**
     * Current competition status for the playoffs.
     */
    status?: 'won' | 'eliminated' | 'playing';
    /**
     * The average match score during playoffs. Year specific. May be null if not relevant for a given year.
     */
    playoff_average?: number;
};

/**
 * The highest playoff level the team reached.
 */
export type level = 'qm' | 'ef' | 'qf' | 'sf' | 'f';

/**
 * Current competition status for the playoffs.
 */
export type status = 'won' | 'eliminated' | 'playing';

export type Event_Ranking = {
    /**
     * List of rankings at the event.
     */
    rankings: Array<{
        /**
         * Number of matches played by this team.
         */
        matches_played: number;
        /**
         * The average match score during qualifications. Year specific. May be null if not relevant for a given year.
         */
        qual_average?: number;
        /**
         * Additional special data on the team's performance calculated by TBA.
         */
        extra_stats?: Array<(number)>;
        /**
         * Additional year-specific information, may be null. See parent `sort_order_info` for details.
         */
        sort_orders?: Array<(number)>;
        record: WLT_Record;
        /**
         * The team's rank at the event as provided by FIRST.
         */
        rank: number;
        /**
         * Number of times disqualified.
         */
        dq: number;
        /**
         * The team with this rank.
         */
        team_key: string;
    }>;
    /**
     * List of special TBA-generated values provided in the `extra_stats` array for each item.
     */
    extra_stats_info?: Array<{
        /**
         * Integer expressing the number of digits of precision in the number provided in `sort_orders`.
         */
        precision: number;
        /**
         * Name of the field used in the `extra_stats` array.
         */
        name: string;
    }>;
    /**
     * List of year-specific values provided in the `sort_orders` array for each team.
     */
    sort_order_info: Array<{
        /**
         * Integer expressing the number of digits of precision in the number provided in `sort_orders`.
         */
        precision: number;
        /**
         * Name of the field used in the `sort_order` array.
         */
        name: string;
    }>;
};

export type Event_District_Points = {
    /**
     * Points gained for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the points as its value.
     */
    points: {
        [key: string]: {
            /**
             * Total points awarded at this event.
             */
            total: number;
            /**
             * Points awarded for alliance selection
             */
            alliance_points: number;
            /**
             * Points awarded for elimination match performance.
             */
            elim_points: number;
            /**
             * Points awarded for event awards.
             */
            award_points: number;
            /**
             * Points awarded for qualification match performance.
             */
            qual_points: number;
        };
    };
    /**
     * Tiebreaker values for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the tiebreaker elements as its value.
     */
    tiebreakers?: {
        [key: string]: {
            highest_qual_scores?: Array<(number)>;
            qual_wins?: number;
        };
    };
};

/**
 * A year-specific event insight object expressed as a JSON string, separated in to `qual` and `playoff` fields. See also Event_Insights_2016, Event_Insights_2017, etc.
 */
export type Event_Insights = {
    /**
     * Inights for the qualification round of an event
     */
    qual?: unknown;
    /**
     * Insights for the playoff round of an event
     */
    playoff?: unknown;
};

/**
 * Insights for FIRST Stronghold qualification and elimination matches.
 */
export type Event_Insights_2016 = {
    /**
     * For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     */
    LowBar: Array<(number)>;
    /**
     * For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     */
    A_ChevalDeFrise: Array<(number)>;
    /**
     * For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     */
    A_Portcullis: Array<(number)>;
    /**
     * For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     */
    B_Ramparts: Array<(number)>;
    /**
     * For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     */
    B_Moat: Array<(number)>;
    /**
     * For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     */
    C_SallyPort: Array<(number)>;
    /**
     * For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     */
    C_Drawbridge: Array<(number)>;
    /**
     * For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     */
    D_RoughTerrain: Array<(number)>;
    /**
     * For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
     */
    D_RockWall: Array<(number)>;
    /**
     * Average number of high goals scored.
     */
    average_high_goals: number;
    /**
     * Average number of low goals scored.
     */
    average_low_goals: number;
    /**
     * An array with three values, number of times breached, number of opportunities to breach, and percentage.
     */
    breaches: Array<(number)>;
    /**
     * An array with three values, number of times scaled, number of opportunities to scale, and percentage.
     */
    scales: Array<(number)>;
    /**
     * An array with three values, number of times challenged, number of opportunities to challenge, and percentage.
     */
    challenges: Array<(number)>;
    /**
     * An array with three values, number of times captured, number of opportunities to capture, and percentage.
     */
    captures: Array<(number)>;
    /**
     * Average winning score.
     */
    average_win_score: number;
    /**
     * Average margin of victory.
     */
    average_win_margin: number;
    /**
     * Average total score.
     */
    average_score: number;
    /**
     * Average autonomous score.
     */
    average_auto_score: number;
    /**
     * Average crossing score.
     */
    average_crossing_score: number;
    /**
     * Average boulder score.
     */
    average_boulder_score: number;
    /**
     * Average tower score.
     */
    average_tower_score: number;
    /**
     * Average foul score.
     */
    average_foul_score: number;
    /**
     * An array with three values, high score, match key from the match with the high score, and the name of the match.
     */
    high_score: Array<(string)>;
};

/**
 * Insights for FIRST STEAMWORKS qualification and elimination matches.
 */
export type Event_Insights_2017 = {
    /**
     * Average foul score.
     */
    average_foul_score: number;
    /**
     * Average fuel points scored.
     */
    average_fuel_points: number;
    /**
     * Average fuel points scored during auto.
     */
    average_fuel_points_auto: number;
    /**
     * Average fuel points scored during teleop.
     */
    average_fuel_points_teleop: number;
    /**
     * Average points scored in the high goal.
     */
    average_high_goals: number;
    /**
     * Average points scored in the high goal during auto.
     */
    average_high_goals_auto: number;
    /**
     * Average points scored in the high goal during teleop.
     */
    average_high_goals_teleop: number;
    /**
     * Average points scored in the low goal.
     */
    average_low_goals: number;
    /**
     * Average points scored in the low goal during auto.
     */
    average_low_goals_auto: number;
    /**
     * Average points scored in the low goal during teleop.
     */
    average_low_goals_teleop: number;
    /**
     * Average mobility points scored during auto.
     */
    average_mobility_points_auto: number;
    /**
     * Average points scored during auto.
     */
    average_points_auto: number;
    /**
     * Average points scored during teleop.
     */
    average_points_teleop: number;
    /**
     * Average rotor points scored.
     */
    average_rotor_points: number;
    /**
     * Average rotor points scored during auto.
     */
    average_rotor_points_auto: number;
    /**
     * Average rotor points scored during teleop.
     */
    average_rotor_points_teleop: number;
    /**
     * Average score.
     */
    average_score: number;
    /**
     * Average takeoff points scored during teleop.
     */
    average_takeoff_points_teleop: number;
    /**
     * Average margin of victory.
     */
    average_win_margin: number;
    /**
     * Average winning score.
     */
    average_win_score: number;
    /**
     * An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match
     */
    high_kpa: Array<(string)>;
    /**
     * An array with three values, high score, match key from the match with the high score, and the name of the match
     */
    high_score: Array<(string)>;
    /**
     * An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.
     */
    kpa_achieved: Array<(number)>;
    /**
     * An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.
     */
    mobility_counts: Array<(number)>;
    /**
     * An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.
     */
    rotor_1_engaged: Array<(number)>;
    /**
     * An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.
     */
    rotor_1_engaged_auto: Array<(number)>;
    /**
     * An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.
     */
    rotor_2_engaged: Array<(number)>;
    /**
     * An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.
     */
    rotor_2_engaged_auto: Array<(number)>;
    /**
     * An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.
     */
    rotor_3_engaged: Array<(number)>;
    /**
     * An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.
     */
    rotor_4_engaged: Array<(number)>;
    /**
     * An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.
     */
    takeoff_counts: Array<(number)>;
    /**
     * An array with three values, number of times a unicorn match (Win + kPa & Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.
     */
    unicorn_matches: Array<(number)>;
};

/**
 * Insights for FIRST Power Up qualification and elimination matches.
 */
export type Event_Insights_2018 = {
    /**
     * An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.
     */
    auto_quest_achieved: Array<(number)>;
    /**
     * Average number of boost power up scored (out of 3).
     */
    average_boost_played: number;
    /**
     * Average endgame points.
     */
    average_endgame_points: number;
    /**
     * Average number of force power up scored (out of 3).
     */
    average_force_played: number;
    /**
     * Average foul score.
     */
    average_foul_score: number;
    /**
     * Average points scored during auto.
     */
    average_points_auto: number;
    /**
     * Average points scored during teleop.
     */
    average_points_teleop: number;
    /**
     * Average mobility points scored during auto.
     */
    average_run_points_auto: number;
    /**
     * Average scale ownership points scored.
     */
    average_scale_ownership_points: number;
    /**
     * Average scale ownership points scored during auto.
     */
    average_scale_ownership_points_auto: number;
    /**
     * Average scale ownership points scored during teleop.
     */
    average_scale_ownership_points_teleop: number;
    /**
     * Average score.
     */
    average_score: number;
    /**
     * Average switch ownership points scored.
     */
    average_switch_ownership_points: number;
    /**
     * Average switch ownership points scored during auto.
     */
    average_switch_ownership_points_auto: number;
    /**
     * Average switch ownership points scored during teleop.
     */
    average_switch_ownership_points_teleop: number;
    /**
     * Average value points scored.
     */
    average_vault_points: number;
    /**
     * Average margin of victory.
     */
    average_win_margin: number;
    /**
     * Average winning score.
     */
    average_win_score: number;
    /**
     * An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.
     */
    boost_played_counts: Array<(number)>;
    /**
     * An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.
     */
    climb_counts: Array<(number)>;
    /**
     * An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.
     */
    face_the_boss_achieved: Array<(number)>;
    /**
     * An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.
     */
    force_played_counts: Array<(number)>;
    /**
     * An array with three values, high score, match key from the match with the high score, and the name of the match
     */
    high_score: Array<(string)>;
    /**
     * An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.
     */
    levitate_played_counts: Array<(number)>;
    /**
     * An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.
     */
    run_counts_auto: Array<(number)>;
    /**
     * Average scale neutral percentage.
     */
    scale_neutral_percentage: number;
    /**
     * Average scale neutral percentage during auto.
     */
    scale_neutral_percentage_auto: number;
    /**
     * Average scale neutral percentage during teleop.
     */
    scale_neutral_percentage_teleop: number;
    /**
     * An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.
     */
    switch_owned_counts_auto: Array<(number)>;
    /**
     * An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.
     */
    unicorn_matches: Array<(number)>;
    /**
     * Average opposing switch denail percentage for the winning alliance during teleop.
     */
    winning_opp_switch_denial_percentage_teleop: number;
    /**
     * Average own switch ownership percentage for the winning alliance.
     */
    winning_own_switch_ownership_percentage: number;
    /**
     * Average own switch ownership percentage for the winning alliance during auto.
     */
    winning_own_switch_ownership_percentage_auto: number;
    /**
     * Average own switch ownership percentage for the winning alliance during teleop.
     */
    winning_own_switch_ownership_percentage_teleop: number;
    /**
     * Average scale ownership percentage for the winning alliance.
     */
    winning_scale_ownership_percentage: number;
    /**
     * Average scale ownership percentage for the winning alliance during auto.
     */
    winning_scale_ownership_percentage_auto: number;
    /**
     * Average scale ownership percentage for the winning alliance during teleop.
     */
    winning_scale_ownership_percentage_teleop: number;
};

/**
 * OPR, DPR, and CCWM for teams at the event.
 */
export type Event_OPRs = {
    /**
     * A key-value pair with team key (eg `frc254`) as key and OPR as value.
     */
    oprs?: {
        [key: string]: (number);
    };
    /**
     * A key-value pair with team key (eg `frc254`) as key and DPR as value.
     */
    dprs?: {
        [key: string]: (number);
    };
    /**
     * A key-value pair with team key (eg `frc254`) as key and CCWM as value.
     */
    ccwms?: {
        [key: string]: (number);
    };
};

/**
 * JSON Object containing prediction information for the event. Contains year-specific information and is subject to change.
 */
export type Event_Predictions = {
    [key: string]: unknown;
};

export type Match_Simple = {
    /**
     * TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may append the competition level if more than one match in required per set.
     */
    key: string;
    /**
     * The competition level the match was played at.
     */
    comp_level: 'qm' | 'ef' | 'qf' | 'sf' | 'f';
    /**
     * The set number in a series of matches where more than one match is required in the match series.
     */
    set_number: number;
    /**
     * The match number of the match in the competition level.
     */
    match_number: number;
    /**
     * A list of alliances, the teams on the alliances, and their score.
     */
    alliances?: {
        red?: Match_alliance;
        blue?: Match_alliance;
    };
    /**
     * The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
     */
    winning_alliance?: 'red' | 'blue' | '';
    /**
     * Event key of the event the match was played at.
     */
    event_key: string;
    /**
     * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.
     */
    time?: number;
    /**
     * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.
     */
    predicted_time?: number;
    /**
     * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.
     */
    actual_time?: number;
};

/**
 * The competition level the match was played at.
 */
export type comp_level = 'qm' | 'ef' | 'qf' | 'sf' | 'f';

/**
 * The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
 */
export type winning_alliance = 'red' | 'blue' | '';

export type Match = {
    /**
     * TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.
     */
    key: string;
    /**
     * The competition level the match was played at.
     */
    comp_level: 'qm' | 'ef' | 'qf' | 'sf' | 'f';
    /**
     * The set number in a series of matches where more than one match is required in the match series.
     */
    set_number: number;
    /**
     * The match number of the match in the competition level.
     */
    match_number: number;
    /**
     * A list of alliances, the teams on the alliances, and their score.
     */
    alliances?: {
        red?: Match_alliance;
        blue?: Match_alliance;
    };
    /**
     * The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
     */
    winning_alliance?: 'red' | 'blue' | '';
    /**
     * Event key of the event the match was played at.
     */
    event_key: string;
    /**
     * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.
     */
    time?: number;
    /**
     * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.
     */
    actual_time?: number;
    /**
     * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.
     */
    predicted_time?: number;
    /**
     * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted.
     */
    post_result_time?: number;
    /**
     * Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null.
     */
    score_breakdown?: unknown;
    /**
     * Array of video objects associated with this match.
     */
    videos?: Array<{
        /**
         * Can be one of 'youtube' or 'tba'
         */
        type?: string;
        /**
         * Unique key representing this video
         */
        key?: string;
    }>;
};

export type Match_alliance = {
    /**
     * Score for this alliance. Will be null or -1 for an unplayed match.
     */
    score: number;
    team_keys: Array<(string)>;
    /**
     * TBA team keys (eg `frc254`) of any teams playing as a surrogate.
     */
    surrogate_team_keys?: Array<(string)>;
    /**
     * TBA team keys (eg `frc254`) of any disqualified teams.
     */
    dq_team_keys?: Array<(string)>;
};

export type Zebra = {
    /**
     * TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.
     */
    key: string;
    /**
     * A list of relative timestamps for each data point. Each timestamp will correspond to the X and Y value at the same index in a team xs and ys arrays. `times`, all teams `xs` and all teams `ys` are guarenteed to be the same length.
     */
    times: Array<(number)>;
    alliances: {
        /**
         * Zebra MotionWorks data for teams on the red alliance
         */
        red?: Array<Zebra_team>;
        /**
         * Zebra data for teams on the blue alliance
         */
        blue?: Array<Zebra_team>;
    };
};

export type Zebra_team = {
    /**
     * The TBA team key for the Zebra MotionWorks data.
     */
    team_key: string;
    /**
     * A list containing doubles and nulls representing a teams X position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.
     */
    xs: Array<(number)>;
    /**
     * A list containing doubles and nulls representing a teams Y position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.
     */
    ys: Array<(number)>;
};

/**
 * See the 2015 FMS API documentation for a description of each value
 */
export type Match_Score_Breakdown_2015 = {
    blue?: Match_Score_Breakdown_2015_Alliance;
    red?: Match_Score_Breakdown_2015_Alliance;
    coopertition?: 'None' | 'Unknown' | 'Stack';
    coopertition_points?: number;
};

export type coopertition = 'None' | 'Unknown' | 'Stack';

export type Match_Score_Breakdown_2015_Alliance = {
    auto_points?: number;
    teleop_points?: number;
    container_points?: number;
    tote_points?: number;
    litter_points?: number;
    foul_points?: number;
    adjust_points?: number;
    total_points?: number;
    foul_count?: number;
    tote_count_far?: number;
    tote_count_near?: number;
    tote_set?: boolean;
    tote_stack?: boolean;
    container_count_level1?: number;
    container_count_level2?: number;
    container_count_level3?: number;
    container_count_level4?: number;
    container_count_level5?: number;
    container_count_level6?: number;
    container_set?: boolean;
    litter_count_container?: number;
    litter_count_landfill?: number;
    litter_count_unprocessed?: number;
    robot_set?: boolean;
};

/**
 * See the 2016 FMS API documentation for a description of each value.
 */
export type Match_Score_Breakdown_2016 = {
    blue?: Match_Score_Breakdown_2016_Alliance;
    red?: Match_Score_Breakdown_2016_Alliance;
};

export type Match_Score_Breakdown_2016_Alliance = {
    autoPoints?: number;
    teleopPoints?: number;
    breachPoints?: number;
    foulPoints?: number;
    capturePoints?: number;
    adjustPoints?: number;
    totalPoints?: number;
    robot1Auto?: 'Crossed' | 'Reached' | 'None';
    robot2Auto?: 'Crossed' | 'Reached' | 'None';
    robot3Auto?: 'Crossed' | 'Reached' | 'None';
    autoReachPoints?: number;
    autoCrossingPoints?: number;
    autoBouldersLow?: number;
    autoBouldersHigh?: number;
    autoBoulderPoints?: number;
    teleopCrossingPoints?: number;
    teleopBouldersLow?: number;
    teleopBouldersHigh?: number;
    teleopBoulderPoints?: number;
    teleopDefensesBreached?: boolean;
    teleopChallengePoints?: number;
    teleopScalePoints?: number;
    teleopTowerCaptured?: number;
    towerFaceA?: string;
    towerFaceB?: string;
    towerFaceC?: string;
    towerEndStrength?: number;
    techFoulCount?: number;
    foulCount?: number;
    position2?: string;
    position3?: string;
    position4?: string;
    position5?: string;
    position1crossings?: number;
    position2crossings?: number;
    position3crossings?: number;
    position4crossings?: number;
    position5crossings?: number;
};

export type robot1Auto = 'Crossed' | 'Reached' | 'None';

export type robot2Auto = 'Crossed' | 'Reached' | 'None';

export type robot3Auto = 'Crossed' | 'Reached' | 'None';

/**
 * See the 2017 FMS API documentation for a description of each value.
 */
export type Match_Score_Breakdown_2017 = {
    blue?: Match_Score_Breakdown_2017_Alliance;
    red?: Match_Score_Breakdown_2017_Alliance;
};

export type Match_Score_Breakdown_2017_Alliance = {
    autoPoints?: number;
    teleopPoints?: number;
    foulPoints?: number;
    adjustPoints?: number;
    totalPoints?: number;
    robot1Auto?: 'Unknown' | 'Mobility' | 'None';
    robot2Auto?: 'Unknown' | 'Mobility' | 'None';
    robot3Auto?: 'Unknown' | 'Mobility' | 'None';
    rotor1Auto?: boolean;
    rotor2Auto?: boolean;
    autoFuelLow?: number;
    autoFuelHigh?: number;
    autoMobilityPoints?: number;
    autoRotorPoints?: number;
    autoFuelPoints?: number;
    teleopFuelPoints?: number;
    teleopFuelLow?: number;
    teleopFuelHigh?: number;
    teleopRotorPoints?: number;
    kPaRankingPointAchieved?: boolean;
    teleopTakeoffPoints?: number;
    kPaBonusPoints?: number;
    rotorBonusPoints?: number;
    rotor1Engaged?: boolean;
    rotor2Engaged?: boolean;
    rotor3Engaged?: boolean;
    rotor4Engaged?: boolean;
    rotorRankingPointAchieved?: boolean;
    techFoulCount?: number;
    foulCount?: number;
    touchpadNear?: string;
    touchpadMiddle?: string;
    touchpadFar?: string;
};

export type robot1Auto2 = 'Unknown' | 'Mobility' | 'None';

export type robot2Auto2 = 'Unknown' | 'Mobility' | 'None';

export type robot3Auto2 = 'Unknown' | 'Mobility' | 'None';

/**
 * See the 2018 FMS API documentation for a description of each value. https://frcevents2.docs.apiary.io/#/reference/match-results/score-details
 */
export type Match_Score_Breakdown_2018 = {
    blue?: Match_Score_Breakdown_2018_Alliance;
    red?: Match_Score_Breakdown_2018_Alliance;
};

export type Match_Score_Breakdown_2018_Alliance = {
    adjustPoints?: number;
    autoOwnershipPoints?: number;
    autoPoints?: number;
    autoQuestRankingPoint?: boolean;
    autoRobot1?: string;
    autoRobot2?: string;
    autoRobot3?: string;
    autoRunPoints?: number;
    autoScaleOwnershipSec?: number;
    autoSwitchAtZero?: boolean;
    autoSwitchOwnershipSec?: number;
    endgamePoints?: number;
    endgameRobot1?: string;
    endgameRobot2?: string;
    endgameRobot3?: string;
    faceTheBossRankingPoint?: boolean;
    foulCount?: number;
    foulPoints?: number;
    rp?: number;
    techFoulCount?: number;
    teleopOwnershipPoints?: number;
    teleopPoints?: number;
    teleopScaleBoostSec?: number;
    teleopScaleForceSec?: number;
    teleopScaleOwnershipSec?: number;
    teleopSwitchBoostSec?: number;
    teleopSwitchForceSec?: number;
    teleopSwitchOwnershipSec?: number;
    totalPoints?: number;
    vaultBoostPlayed?: number;
    vaultBoostTotal?: number;
    vaultForcePlayed?: number;
    vaultForceTotal?: number;
    vaultLevitatePlayed?: number;
    vaultLevitateTotal?: number;
    vaultPoints?: number;
    /**
     * Unofficial TBA-computed value of the FMS provided GameData given to the alliance teams at the start of the match. 3 Character String containing `L` and `R` only. The first character represents the near switch, the 2nd the scale, and the 3rd the far, opposing, switch from the alliance's perspective. An `L` in a position indicates the platform on the left will be lit for the alliance while an `R` will indicate the right platform will be lit for the alliance. See also [WPI Screen Steps](https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/826278-2018-game-data-details).
     */
    tba_gameData?: string;
};

/**
 * Timeseries data for the 2018 game *FIRST* POWER UP.
 * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
 * *WARNING:* This model is currently under active development and may change at any time, including in breaking ways.
 */
export type Match_Timeseries_2018 = {
    /**
     * TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
     */
    event_key?: string;
    /**
     * Match ID consisting of the level, match number, and set number, eg `qm45` or `f1m1`.
     */
    match_id?: string;
    /**
     * Current mode of play, can be `pre_match`, `auto`, `telop`, or `post_match`.
     */
    mode?: string;
    play?: number;
    /**
     * Amount of time remaining in the match, only valid during `auto` and `teleop` modes.
     */
    time_remaining?: number;
    /**
     * 1 if the blue alliance is credited with the AUTO QUEST, 0 if not.
     */
    blue_auto_quest?: number;
    /**
     * Number of POWER CUBES in the BOOST section of the blue alliance VAULT.
     */
    blue_boost_count?: number;
    /**
     * Returns 1 if the blue alliance BOOST was played, or 0 if not played.
     */
    blue_boost_played?: number;
    /**
     * Name of the current blue alliance POWER UP being played, or `null`.
     */
    blue_current_powerup?: string;
    /**
     * 1 if the blue alliance is credited with FACING THE BOSS, 0 if not.
     */
    blue_face_the_boss?: number;
    /**
     * Number of POWER CUBES in the FORCE section of the blue alliance VAULT.
     */
    blue_force_count?: number;
    /**
     * Returns 1 if the blue alliance FORCE was played, or 0 if not played.
     */
    blue_force_played?: number;
    /**
     * Number of POWER CUBES in the LEVITATE section of the blue alliance VAULT.
     */
    blue_levitate_count?: number;
    /**
     * Returns 1 if the blue alliance LEVITATE was played, or 0 if not played.
     */
    blue_levitate_played?: number;
    /**
     * Number of seconds remaining in the blue alliance POWER UP time, or 0 if none is active.
     */
    blue_powerup_time_remaining?: string;
    /**
     * 1 if the blue alliance owns the SCALE, 0 if not.
     */
    blue_scale_owned?: number;
    /**
     * Current score for the blue alliance.
     */
    blue_score?: number;
    /**
     * 1 if the blue alliance owns their SWITCH, 0 if not.
     */
    blue_switch_owned?: number;
    /**
     * 1 if the red alliance is credited with the AUTO QUEST, 0 if not.
     */
    red_auto_quest?: number;
    /**
     * Number of POWER CUBES in the BOOST section of the red alliance VAULT.
     */
    red_boost_count?: number;
    /**
     * Returns 1 if the red alliance BOOST was played, or 0 if not played.
     */
    red_boost_played?: number;
    /**
     * Name of the current red alliance POWER UP being played, or `null`.
     */
    red_current_powerup?: string;
    /**
     * 1 if the red alliance is credited with FACING THE BOSS, 0 if not.
     */
    red_face_the_boss?: number;
    /**
     * Number of POWER CUBES in the FORCE section of the red alliance VAULT.
     */
    red_force_count?: number;
    /**
     * Returns 1 if the red alliance FORCE was played, or 0 if not played.
     */
    red_force_played?: number;
    /**
     * Number of POWER CUBES in the LEVITATE section of the red alliance VAULT.
     */
    red_levitate_count?: number;
    /**
     * Returns 1 if the red alliance LEVITATE was played, or 0 if not played.
     */
    red_levitate_played?: number;
    /**
     * Number of seconds remaining in the red alliance POWER UP time, or 0 if none is active.
     */
    red_powerup_time_remaining?: string;
    /**
     * 1 if the red alliance owns the SCALE, 0 if not.
     */
    red_scale_owned?: number;
    /**
     * Current score for the red alliance.
     */
    red_score?: number;
    /**
     * 1 if the red alliance owns their SWITCH, 0 if not.
     */
    red_switch_owned?: number;
};

/**
 * See the 2019 FMS API documentation for a description of each value. https://frcevents2.docs.apiary.io/#/reference/match-results/score-details
 */
export type Match_Score_Breakdown_2019 = {
    blue?: Match_Score_Breakdown_2019_Alliance;
    red?: Match_Score_Breakdown_2019_Alliance;
};

export type Match_Score_Breakdown_2019_Alliance = {
    adjustPoints?: number;
    autoPoints?: number;
    bay1?: string;
    bay2?: string;
    bay3?: string;
    bay4?: string;
    bay5?: string;
    bay6?: string;
    bay7?: string;
    bay8?: string;
    cargoPoints?: number;
    completeRocketRankingPoint?: boolean;
    completedRocketFar?: boolean;
    completedRocketNear?: boolean;
    endgameRobot1?: string;
    endgameRobot2?: string;
    endgameRobot3?: string;
    foulCount?: number;
    foulPoints?: number;
    habClimbPoints?: number;
    habDockingRankingPoint?: boolean;
    habLineRobot1?: string;
    habLineRobot2?: string;
    habLineRobot3?: string;
    hatchPanelPoints?: number;
    lowLeftRocketFar?: string;
    lowLeftRocketNear?: string;
    lowRightRocketFar?: string;
    lowRightRocketNear?: string;
    midLeftRocketFar?: string;
    midLeftRocketNear?: string;
    midRightRocketFar?: string;
    midRightRocketNear?: string;
    preMatchBay1?: string;
    preMatchBay2?: string;
    preMatchBay3?: string;
    preMatchBay6?: string;
    preMatchBay7?: string;
    preMatchBay8?: string;
    preMatchLevelRobot1?: string;
    preMatchLevelRobot2?: string;
    preMatchLevelRobot3?: string;
    rp?: number;
    sandStormBonusPoints?: number;
    techFoulCount?: number;
    teleopPoints?: number;
    topLeftRocketFar?: string;
    topLeftRocketNear?: string;
    topRightRocketFar?: string;
    topRightRocketNear?: string;
    totalPoints?: number;
};

/**
 * See the 2020 FMS API documentation for a description of each value. https://frcevents2.docs.apiary.io/#/reference/match-results/score-details
 */
export type Match_Score_Breakdown_2020 = {
    blue?: Match_Score_Breakdown_2020_Alliance;
    red?: Match_Score_Breakdown_2020_Alliance;
};

export type Match_Score_Breakdown_2020_Alliance = {
    initLineRobot1?: string;
    endgameRobot1?: string;
    initLineRobot2?: string;
    endgameRobot2?: string;
    initLineRobot3?: string;
    endgameRobot3?: string;
    autoCellsBottom?: number;
    autoCellsOuter?: number;
    autoCellsInner?: number;
    teleopCellsBottom?: number;
    teleopCellsOuter?: number;
    teleopCellsInner?: number;
    stage1Activated?: boolean;
    stage2Activated?: boolean;
    stage3Activated?: boolean;
    stage3TargetColor?: string;
    endgameRungIsLevel?: string;
    autoInitLinePoints?: number;
    autoCellPoints?: number;
    autoPoints?: number;
    teleopCellPoints?: number;
    controlPanelPoints?: number;
    endgamePoints?: number;
    teleopPoints?: number;
    shieldOperationalRankingPoint?: boolean;
    shieldEnergizedRankingPoint?: boolean;
    /**
     * Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul.
     */
    tba_shieldEnergizedRankingPointFromFoul?: boolean;
    /**
     * Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match.
     */
    tba_numRobotsHanging?: number;
    foulCount?: number;
    techFoulCount?: number;
    adjustPoints?: number;
    foulPoints?: number;
    rp?: number;
    totalPoints?: number;
};

/**
 * See the 2022 FMS API documentation for a description of each value. https://frc-api-docs.firstinspires.org
 */
export type Match_Score_Breakdown_2022 = {
    blue?: Match_Score_Breakdown_2022_Alliance;
    red?: Match_Score_Breakdown_2022_Alliance;
};

export type Match_Score_Breakdown_2022_Alliance = {
    taxiRobot1?: 'Yes' | 'No';
    endgameRobot1?: 'Traversal' | 'High' | 'Mid' | 'Low' | 'None';
    taxiRobot2?: 'Yes' | 'No';
    endgameRobot2?: 'Traversal' | 'High' | 'Mid' | 'Low' | 'None';
    taxiRobot3?: 'Yes' | 'No';
    endgameRobot3?: 'Traversal' | 'High' | 'Mid' | 'Low' | 'None';
    autoCargoLowerNear?: number;
    autoCargoLowerFar?: number;
    autoCargoLowerBlue?: number;
    autoCargoLowerRed?: number;
    autoCargoUpperNear?: number;
    autoCargoUpperFar?: number;
    autoCargoUpperBlue?: number;
    autoCargoUpperRed?: number;
    autoCargoTotal?: number;
    teleopCargoLowerNear?: number;
    teleopCargoLowerFar?: number;
    teleopCargoLowerBlue?: number;
    teleopCargoLowerRed?: number;
    teleopCargoUpperNear?: number;
    teleopCargoUpperFar?: number;
    teleopCargoUpperBlue?: number;
    teleopCargoUpperRed?: number;
    teleopCargoTotal?: number;
    matchCargoTotal?: number;
    autoTaxiPoints?: number;
    autoCargoPoints?: number;
    autoPoints?: number;
    quintetAchieved?: boolean;
    teleopCargoPoints?: number;
    endgamePoints?: number;
    teleopPoints?: number;
    cargoBonusRankingPoint?: boolean;
    hangarBonusRankingPoint?: boolean;
    foulCount?: number;
    techFoulCount?: number;
    adjustPoints?: number;
    foulPoints?: number;
    rp?: number;
    totalPoints?: number;
};

export type taxiRobot1 = 'Yes' | 'No';

export type endgameRobot1 = 'Traversal' | 'High' | 'Mid' | 'Low' | 'None';

export type taxiRobot2 = 'Yes' | 'No';

export type endgameRobot2 = 'Traversal' | 'High' | 'Mid' | 'Low' | 'None';

export type taxiRobot3 = 'Yes' | 'No';

export type endgameRobot3 = 'Traversal' | 'High' | 'Mid' | 'Low' | 'None';

/**
 * See the 2023 FMS API documentation for a description of each value. https://frc-api-docs.firstinspires.org
 */
export type Match_Score_Breakdown_2023 = {
    blue?: Match_Score_Breakdown_2023_Alliance;
    red?: Match_Score_Breakdown_2023_Alliance;
};

export type Match_Score_Breakdown_2023_Alliance = {
    activationBonusAchieved?: boolean;
    adjustPoints?: number;
    autoBridgeState?: 'NotLevel' | 'Level';
    autoChargeStationPoints?: number;
    autoChargeStationRobot1?: 'None' | 'Docked';
    autoChargeStationRobot2?: 'None' | 'Docked';
    autoChargeStationRobot3?: 'None' | 'Docked';
    autoDocked?: boolean;
    autoCommunity?: {
        B?: Array<('None' | 'Cone' | 'Cube')>;
        M?: Array<('None' | 'Cone' | 'Cube')>;
        T?: Array<('None' | 'Cone' | 'Cube')>;
    };
    autoGamePieceCount?: number;
    autoGamePiecePoints?: number;
    autoMobilityPoints?: number;
    mobilityRobot1?: 'Yes' | 'No';
    mobilityRobot2?: 'Yes' | 'No';
    mobilityRobot3?: 'Yes' | 'No';
    autoPoints?: number;
    coopGamePieceCount?: number;
    coopertitionCriteriaMet?: boolean;
    endGameBridgeState?: 'NotLevel' | 'Level';
    endGameChargeStationPoints?: number;
    endGameChargeStationRobot1?: 'None' | 'Docked';
    endGameChargeStationRobot2?: 'None' | 'Docked';
    endGameChargeStationRobot3?: 'None' | 'Docked';
    endGameParkPoints?: number;
    extraGamePieceCount?: number;
    foulCount?: number;
    foulPoints?: number;
    techFoulCount?: number;
    linkPoints?: number;
    links?: Array<{
        nodes?: Array<('None' | 'Cone' | 'Cube')>;
        row?: 'Bottom' | 'Mid' | 'Top';
    }>;
    sustainabilityBonusAchieved?: boolean;
    teleopCommunity?: {
        B?: Array<('None' | 'Cone' | 'Cube')>;
        M?: Array<('None' | 'Cone' | 'Cube')>;
        T?: Array<('None' | 'Cone' | 'Cube')>;
    };
    teleopGamePieceCount?: number;
    teleopGamePiecePoints?: number;
    totalChargeStationPoints?: number;
    teleopPoints?: number;
    rp?: number;
    totalPoints?: number;
};

export type autoBridgeState = 'NotLevel' | 'Level';

export type autoChargeStationRobot1 = 'None' | 'Docked';

export type autoChargeStationRobot2 = 'None' | 'Docked';

export type autoChargeStationRobot3 = 'None' | 'Docked';

export type mobilityRobot1 = 'Yes' | 'No';

export type mobilityRobot2 = 'Yes' | 'No';

export type mobilityRobot3 = 'Yes' | 'No';

export type endGameBridgeState = 'NotLevel' | 'Level';

export type endGameChargeStationRobot1 = 'None' | 'Docked';

export type endGameChargeStationRobot2 = 'None' | 'Docked';

export type endGameChargeStationRobot3 = 'None' | 'Docked';

/**
 * The `Media` object contains a reference for most any media associated with a team or event on TBA.
 */
export type Media = {
    /**
     * String type of the media element.
     */
    type: 'youtube' | 'cdphotothread' | 'imgur' | 'facebook-profile' | 'youtube-channel' | 'twitter-profile' | 'github-profile' | 'instagram-profile' | 'periscope-profile' | 'gitlab-profile' | 'grabcad' | 'instagram-image' | 'external-link' | 'avatar';
    /**
     * The key used to identify this media on the media site.
     */
    foreign_key: string;
    /**
     * If required, a JSON dict of additional media information.
     */
    details?: unknown;
    /**
     * True if the media is of high quality.
     */
    preferred?: boolean;
    /**
     * Direct URL to the media.
     */
    direct_url?: string;
    /**
     * The URL that leads to the full web page for the media, if one exists.
     */
    view_url?: string;
};

/**
 * String type of the media element.
 */
export type type = 'youtube' | 'cdphotothread' | 'imgur' | 'facebook-profile' | 'youtube-channel' | 'twitter-profile' | 'github-profile' | 'instagram-profile' | 'periscope-profile' | 'gitlab-profile' | 'grabcad' | 'instagram-image' | 'external-link' | 'avatar';

export type Elimination_Alliance = {
    /**
     * Alliance name, may be null.
     */
    name?: string;
    /**
     * Backup team called in, may be null.
     */
    backup?: {
        /**
         * Team key that was called in as the backup.
         */
        in?: string;
        /**
         * Team key that was replaced by the backup team.
         */
        out?: string;
    };
    /**
     * List of teams that declined the alliance.
     */
    declines?: Array<(string)>;
    /**
     * List of team keys picked for the alliance. First pick is captain.
     */
    picks: Array<(string)>;
    status?: {
        playoff_average?: number;
        level?: string;
        record?: WLT_Record;
        current_level_record?: WLT_Record;
        status?: string;
    };
};

export type Award = {
    /**
     * The name of the award as provided by FIRST. May vary for the same award type.
     */
    name: string;
    /**
     * Type of award given. See https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/award_type.py#L6
     */
    award_type: number;
    /**
     * The event_key of the event the award was won at.
     */
    event_key: string;
    /**
     * A list of recipients of the award at the event. May have either a team_key or an awardee, both, or neither (in the case the award wasn't awarded at the event).
     */
    recipient_list: Array<Award_Recipient>;
    /**
     * The year this award was won.
     */
    year: number;
};

/**
 * An `Award_Recipient` object represents the team and/or person who received an award at an event.
 */
export type Award_Recipient = {
    /**
     * The TBA team key for the team that was given the award. May be null.
     */
    team_key?: string;
    /**
     * The name of the individual given the award. May be null.
     */
    awardee?: string;
};

export type District_List = {
    /**
     * The short identifier for the district.
     */
    abbreviation: string;
    /**
     * The long name for the district.
     */
    display_name: string;
    /**
     * Key for this district, e.g. `2016ne`.
     */
    key: string;
    /**
     * Year this district participated.
     */
    year: number;
};

/**
 * Rank of a team in a district.
 */
export type District_Ranking = {
    /**
     * TBA team key for the team.
     */
    team_key: string;
    /**
     * Numerical rank of the team, 1 being top rank.
     */
    rank: number;
    /**
     * Any points added to a team as a result of the rookie bonus.
     */
    rookie_bonus?: number;
    /**
     * Total district points for the team.
     */
    point_total: number;
    /**
     * List of events that contributed to the point total for the team.
     */
    event_points?: Array<{
        /**
         * `true` if this event is a District Championship event.
         */
        district_cmp: boolean;
        /**
         * Total points awarded at this event.
         */
        total: number;
        /**
         * Points awarded for alliance selection.
         */
        alliance_points: number;
        /**
         * Points awarded for elimination match performance.
         */
        elim_points: number;
        /**
         * Points awarded for event awards.
         */
        award_points: number;
        /**
         * TBA Event key for this event.
         */
        event_key: string;
        /**
         * Points awarded for qualification match performance.
         */
        qual_points: number;
    }>;
};

/**
 * A Win-Loss-Tie record for a team, or an alliance.
 */
export type WLT_Record = {
    /**
     * Number of losses.
     */
    losses: number;
    /**
     * Number of wins.
     */
    wins: number;
    /**
     * Number of ties.
     */
    ties: number;
};

export type Webcast = {
    /**
     * Type of webcast, typically descriptive of the streaming provider.
     */
    type: 'youtube' | 'twitch' | 'ustream' | 'iframe' | 'html5' | 'rtmp' | 'livestream' | 'direct_link' | 'mms' | 'justin' | 'stemtv' | 'dacast';
    /**
     * Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe.
     */
    channel: string;
    /**
     * The date for the webcast in `yyyy-mm-dd` format. May be null.
     */
    date?: string;
    /**
     * File identification as may be required for some types. May be null.
     */
    file?: string;
};

/**
 * Type of webcast, typically descriptive of the streaming provider.
 */
export type type2 = 'youtube' | 'twitch' | 'ustream' | 'iframe' | 'html5' | 'rtmp' | 'livestream' | 'direct_link' | 'mms' | 'justin' | 'stemtv' | 'dacast';

/**
 * Competition Year (or Season). Must be 4 digits.
 */
export type Parameteryear = number;

/**
 * Media Tag which describes the Media.
 */
export type Parametermedia_tag = string;

/**
 * Value of the `ETag` header in the most recently cached response by the client.
 */
export type ParameterIf_None_Match = string;

/**
 * Page number of results to return, zero-indexed
 */
export type Parameterpage_num = number;

/**
 * TBA Match Key, eg `2016nytr_qm1`
 */
export type Parametermatch_key = string;

/**
 * TBA District Key, eg `2016fim`
 */
export type Parameterdistrict_key = string;

/**
 * TBA Team Key, eg `frc254`
 */
export type Parameterteam_key = string;

/**
 * TBA Event Key, eg `2016nytr`
 */
export type Parameterevent_key = string;

export type GetStatusData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetStatusResponse = API_Status;

export type GetTeamsData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * Page number of results to return, zero-indexed
     */
    pageNum: number;
};

export type GetTeamsResponse = Array<Team>;

export type GetTeamsSimpleData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * Page number of results to return, zero-indexed
     */
    pageNum: number;
};

export type GetTeamsSimpleResponse = Array<Team_Simple>;

export type GetTeamsKeysData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * Page number of results to return, zero-indexed
     */
    pageNum: number;
};

export type GetTeamsKeysResponse = Array<(string)>;

export type GetTeamsByYearData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * Page number of results to return, zero-indexed
     */
    pageNum: number;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetTeamsByYearResponse = Array<Team>;

export type GetTeamsByYearSimpleData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * Page number of results to return, zero-indexed
     */
    pageNum: number;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetTeamsByYearSimpleResponse = Array<Team_Simple>;

export type GetTeamsByYearKeysData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * Page number of results to return, zero-indexed
     */
    pageNum: number;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetTeamsByYearKeysResponse = Array<(string)>;

export type GetTeamData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamResponse = Team;

export type GetTeamSimpleData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamSimpleResponse = Team_Simple;

export type GetTeamYearsParticipatedData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamYearsParticipatedResponse = Array<(number)>;

export type GetTeamDistrictsData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamDistrictsResponse = Array<District_List>;

export type GetTeamRobotsData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamRobotsResponse = Array<Team_Robot>;

export type GetTeamEventsData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamEventsResponse = Array<Event>;

export type GetTeamEventsSimpleData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamEventsSimpleResponse = Array<Event_Simple>;

export type GetTeamEventsKeysData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamEventsKeysResponse = Array<(string)>;

export type GetTeamEventsByYearData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetTeamEventsByYearResponse = Array<Event>;

export type GetTeamEventsByYearSimpleData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetTeamEventsByYearSimpleResponse = Array<Event_Simple>;

export type GetTeamEventsByYearKeysData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetTeamEventsByYearKeysResponse = Array<(string)>;

export type GetTeamEventsStatusesByYearData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetTeamEventsStatusesByYearResponse = {
    [key: string]: Team_Event_Status;
};

export type GetTeamEventMatchesData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamEventMatchesResponse = Array<Match>;

export type GetTeamEventMatchesSimpleData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamEventMatchesSimpleResponse = Array<Match>;

export type GetTeamEventMatchesKeysData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamEventMatchesKeysResponse = Array<(string)>;

export type GetTeamEventAwardsData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamEventAwardsResponse = Array<Award>;

export type GetTeamEventStatusData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamEventStatusResponse = Team_Event_Status;

export type GetTeamAwardsData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamAwardsResponse = Array<Award>;

export type GetTeamAwardsByYearData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetTeamAwardsByYearResponse = Array<Award>;

export type GetTeamMatchesByYearData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetTeamMatchesByYearResponse = Array<Match>;

export type GetTeamMatchesByYearSimpleData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetTeamMatchesByYearSimpleResponse = Array<Match_Simple>;

export type GetTeamMatchesByYearKeysData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetTeamMatchesByYearKeysResponse = Array<(string)>;

export type GetTeamMediaByYearData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetTeamMediaByYearResponse = Array<Media>;

export type GetTeamMediaByTagData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * Media Tag which describes the Media.
     */
    mediaTag: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamMediaByTagResponse = Array<Media>;

export type GetTeamMediaByTagYearData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * Media Tag which describes the Media.
     */
    mediaTag: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetTeamMediaByTagYearResponse = Array<Media>;

export type GetTeamSocialMediaData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Team Key, eg `frc254`
     */
    teamKey: string;
};

export type GetTeamSocialMediaResponse = Array<Media>;

export type GetEventsByYearData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetEventsByYearResponse = Array<Event>;

export type GetEventsByYearSimpleData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetEventsByYearSimpleResponse = Array<Event_Simple>;

export type GetEventsByYearKeysData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetEventsByYearKeysResponse = Array<(string)>;

export type GetEventData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventResponse = Event;

export type GetEventSimpleData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventSimpleResponse = Event_Simple;

export type GetEventAlliancesData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventAlliancesResponse = Array<Elimination_Alliance>;

export type GetEventInsightsData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventInsightsResponse = Event_Insights;

export type GetEventOpRsData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventOpRsResponse = Event_OPRs;

export type GetEventPredictionsData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventPredictionsResponse = Event_Predictions;

export type GetEventRankingsData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventRankingsResponse = Event_Ranking;

export type GetEventDistrictPointsData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventDistrictPointsResponse = Event_District_Points;

export type GetEventTeamsData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventTeamsResponse = Array<Team>;

export type GetEventTeamsSimpleData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventTeamsSimpleResponse = Array<Team_Simple>;

export type GetEventTeamsKeysData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventTeamsKeysResponse = Array<(string)>;

export type GetEventTeamsStatusesData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventTeamsStatusesResponse = {
    [key: string]: Team_Event_Status;
};

export type GetEventMatchesData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventMatchesResponse = Array<Match>;

export type GetEventMatchesSimpleData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventMatchesSimpleResponse = Array<Match_Simple>;

export type GetEventMatchesKeysData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventMatchesKeysResponse = Array<(string)>;

export type GetEventMatchTimeseriesData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventMatchTimeseriesResponse = Array<(string)>;

export type GetEventAwardsData = {
    /**
     * TBA Event Key, eg `2016nytr`
     */
    eventKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetEventAwardsResponse = Array<Award>;

export type GetMatchData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Match Key, eg `2016nytr_qm1`
     */
    matchKey: string;
};

export type GetMatchResponse = Match;

export type GetMatchSimpleData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Match Key, eg `2016nytr_qm1`
     */
    matchKey: string;
};

export type GetMatchSimpleResponse = Match_Simple;

export type GetMatchTimeseriesData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Match Key, eg `2016nytr_qm1`
     */
    matchKey: string;
};

export type GetMatchTimeseriesResponse = Array<unknown>;

export type GetMatchZebraData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * TBA Match Key, eg `2016nytr_qm1`
     */
    matchKey: string;
};

export type GetMatchZebraResponse = Zebra;

export type GetDistrictsByYearData = {
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
    /**
     * Competition Year (or Season). Must be 4 digits.
     */
    year: number;
};

export type GetDistrictsByYearResponse = Array<District_List>;

export type GetDistrictEventsData = {
    /**
     * TBA District Key, eg `2016fim`
     */
    districtKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetDistrictEventsResponse = Array<Event>;

export type GetDistrictEventsSimpleData = {
    /**
     * TBA District Key, eg `2016fim`
     */
    districtKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetDistrictEventsSimpleResponse = Array<Event_Simple>;

export type GetDistrictEventsKeysData = {
    /**
     * TBA District Key, eg `2016fim`
     */
    districtKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetDistrictEventsKeysResponse = Array<(string)>;

export type GetDistrictTeamsData = {
    /**
     * TBA District Key, eg `2016fim`
     */
    districtKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetDistrictTeamsResponse = Array<Team>;

export type GetDistrictTeamsSimpleData = {
    /**
     * TBA District Key, eg `2016fim`
     */
    districtKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetDistrictTeamsSimpleResponse = Array<Team_Simple>;

export type GetDistrictTeamsKeysData = {
    /**
     * TBA District Key, eg `2016fim`
     */
    districtKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetDistrictTeamsKeysResponse = Array<(string)>;

export type GetDistrictRankingsData = {
    /**
     * TBA District Key, eg `2016fim`
     */
    districtKey: string;
    /**
     * Value of the `ETag` header in the most recently cached response by the client.
     */
    ifNoneMatch?: string;
};

export type GetDistrictRankingsResponse = Array<District_Ranking>;

export type $OpenApiTs = {
    '/status': {
        get: {
            req: GetStatusData;
            res: {
                /**
                 * Successful response
                 */
                200: API_Status;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/teams/{page_num}': {
        get: {
            req: GetTeamsData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Team>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/teams/{page_num}/simple': {
        get: {
            req: GetTeamsSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Team_Simple>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/teams/{page_num}/keys': {
        get: {
            req: GetTeamsKeysData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<(string)>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/teams/{year}/{page_num}': {
        get: {
            req: GetTeamsByYearData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Team>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/teams/{year}/{page_num}/simple': {
        get: {
            req: GetTeamsByYearSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Team_Simple>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/teams/{year}/{page_num}/keys': {
        get: {
            req: GetTeamsByYearKeysData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<(string)>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}': {
        get: {
            req: GetTeamData;
            res: {
                /**
                 * Successful response
                 */
                200: Team;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/simple': {
        get: {
            req: GetTeamSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Team_Simple;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/years_participated': {
        get: {
            req: GetTeamYearsParticipatedData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<(number)>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/districts': {
        get: {
            req: GetTeamDistrictsData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<District_List>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/robots': {
        get: {
            req: GetTeamRobotsData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Team_Robot>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/events': {
        get: {
            req: GetTeamEventsData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Event>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/events/simple': {
        get: {
            req: GetTeamEventsSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Event_Simple>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/events/keys': {
        get: {
            req: GetTeamEventsKeysData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<(string)>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/events/{year}': {
        get: {
            req: GetTeamEventsByYearData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Event>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/events/{year}/simple': {
        get: {
            req: GetTeamEventsByYearSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Event_Simple>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/events/{year}/keys': {
        get: {
            req: GetTeamEventsByYearKeysData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<(string)>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/events/{year}/statuses': {
        get: {
            req: GetTeamEventsStatusesByYearData;
            res: {
                /**
                 * Successful response
                 */
                200: {
                    [key: string]: Team_Event_Status;
                };
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/event/{event_key}/matches': {
        get: {
            req: GetTeamEventMatchesData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Match>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/event/{event_key}/matches/simple': {
        get: {
            req: GetTeamEventMatchesSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Match>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/event/{event_key}/matches/keys': {
        get: {
            req: GetTeamEventMatchesKeysData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<(string)>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/event/{event_key}/awards': {
        get: {
            req: GetTeamEventAwardsData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Award>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/event/{event_key}/status': {
        get: {
            req: GetTeamEventStatusData;
            res: {
                /**
                 * Successful response
                 */
                200: Team_Event_Status;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/awards': {
        get: {
            req: GetTeamAwardsData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Award>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/awards/{year}': {
        get: {
            req: GetTeamAwardsByYearData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Award>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/matches/{year}': {
        get: {
            req: GetTeamMatchesByYearData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Match>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/matches/{year}/simple': {
        get: {
            req: GetTeamMatchesByYearSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Match_Simple>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/matches/{year}/keys': {
        get: {
            req: GetTeamMatchesByYearKeysData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<(string)>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/media/{year}': {
        get: {
            req: GetTeamMediaByYearData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Media>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/media/tag/{media_tag}': {
        get: {
            req: GetTeamMediaByTagData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Media>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/media/tag/{media_tag}/{year}': {
        get: {
            req: GetTeamMediaByTagYearData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Media>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/team/{team_key}/social_media': {
        get: {
            req: GetTeamSocialMediaData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Media>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/events/{year}': {
        get: {
            req: GetEventsByYearData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Event>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/events/{year}/simple': {
        get: {
            req: GetEventsByYearSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Event_Simple>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/events/{year}/keys': {
        get: {
            req: GetEventsByYearKeysData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<(string)>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}': {
        get: {
            req: GetEventData;
            res: {
                /**
                 * Successful response
                 */
                200: Event;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/simple': {
        get: {
            req: GetEventSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Event_Simple;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/alliances': {
        get: {
            req: GetEventAlliancesData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Elimination_Alliance>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/insights': {
        get: {
            req: GetEventInsightsData;
            res: {
                /**
                 * Successful response
                 */
                200: Event_Insights;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/oprs': {
        get: {
            req: GetEventOpRsData;
            res: {
                /**
                 * Successful response
                 */
                200: Event_OPRs;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/predictions': {
        get: {
            req: GetEventPredictionsData;
            res: {
                /**
                 * Successful response
                 */
                200: Event_Predictions;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/rankings': {
        get: {
            req: GetEventRankingsData;
            res: {
                /**
                 * Successful response
                 */
                200: Event_Ranking;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/district_points': {
        get: {
            req: GetEventDistrictPointsData;
            res: {
                /**
                 * Successful response
                 */
                200: Event_District_Points;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/teams': {
        get: {
            req: GetEventTeamsData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Team>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/teams/simple': {
        get: {
            req: GetEventTeamsSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Team_Simple>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/teams/keys': {
        get: {
            req: GetEventTeamsKeysData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<(string)>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/teams/statuses': {
        get: {
            req: GetEventTeamsStatusesData;
            res: {
                /**
                 * Successful response
                 */
                200: {
                    [key: string]: Team_Event_Status;
                };
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/matches': {
        get: {
            req: GetEventMatchesData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Match>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/matches/simple': {
        get: {
            req: GetEventMatchesSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Match_Simple>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/matches/keys': {
        get: {
            req: GetEventMatchesKeysData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<(string)>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/matches/timeseries': {
        get: {
            req: GetEventMatchTimeseriesData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<(string)>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/event/{event_key}/awards': {
        get: {
            req: GetEventAwardsData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Award>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/match/{match_key}': {
        get: {
            req: GetMatchData;
            res: {
                /**
                 * Successful response
                 */
                200: Match;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/match/{match_key}/simple': {
        get: {
            req: GetMatchSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Match_Simple;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/match/{match_key}/timeseries': {
        get: {
            req: GetMatchTimeseriesData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<unknown>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/match/{match_key}/zebra_motionworks': {
        get: {
            req: GetMatchZebraData;
            res: {
                /**
                 * Successful response
                 */
                200: Zebra;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/districts/{year}': {
        get: {
            req: GetDistrictsByYearData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<District_List>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/district/{district_key}/events': {
        get: {
            req: GetDistrictEventsData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Event>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/district/{district_key}/events/simple': {
        get: {
            req: GetDistrictEventsSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Event_Simple>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/district/{district_key}/events/keys': {
        get: {
            req: GetDistrictEventsKeysData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<(string)>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/district/{district_key}/teams': {
        get: {
            req: GetDistrictTeamsData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Team>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/district/{district_key}/teams/simple': {
        get: {
            req: GetDistrictTeamsSimpleData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<Team_Simple>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/district/{district_key}/teams/keys': {
        get: {
            req: GetDistrictTeamsKeysData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<(string)>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
    '/district/{district_key}/rankings': {
        get: {
            req: GetDistrictRankingsData;
            res: {
                /**
                 * Successful response
                 */
                200: Array<District_Ranking>;
                /**
                 * Not Modified - Use Local Cached Value
                 */
                304: unknown;
                /**
                 * Authorization information is missing or invalid.
                 */
                401: {
                    /**
                     * Authorization error description.
                     */
                    Error: string;
                };
            };
        };
    };
};