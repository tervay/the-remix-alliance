// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetStatusData, GetStatusResponse, GetTeamsData, GetTeamsResponse, GetTeamsSimpleData, GetTeamsSimpleResponse, GetTeamsKeysData, GetTeamsKeysResponse, GetTeamsByYearData, GetTeamsByYearResponse, GetTeamsByYearSimpleData, GetTeamsByYearSimpleResponse, GetTeamsByYearKeysData, GetTeamsByYearKeysResponse, GetTeamData, GetTeamResponse, GetTeamSimpleData, GetTeamSimpleResponse, GetTeamYearsParticipatedData, GetTeamYearsParticipatedResponse, GetTeamDistrictsData, GetTeamDistrictsResponse, GetTeamRobotsData, GetTeamRobotsResponse, GetTeamEventsData, GetTeamEventsResponse, GetTeamEventsSimpleData, GetTeamEventsSimpleResponse, GetTeamEventsKeysData, GetTeamEventsKeysResponse, GetTeamEventsByYearData, GetTeamEventsByYearResponse, GetTeamEventsByYearSimpleData, GetTeamEventsByYearSimpleResponse, GetTeamEventsByYearKeysData, GetTeamEventsByYearKeysResponse, GetTeamEventsStatusesByYearData, GetTeamEventsStatusesByYearResponse, GetTeamEventMatchesData, GetTeamEventMatchesResponse, GetTeamEventMatchesSimpleData, GetTeamEventMatchesSimpleResponse, GetTeamEventMatchesKeysData, GetTeamEventMatchesKeysResponse, GetTeamEventAwardsData, GetTeamEventAwardsResponse, GetTeamEventStatusData, GetTeamEventStatusResponse, GetTeamAwardsData, GetTeamAwardsResponse, GetTeamAwardsByYearData, GetTeamAwardsByYearResponse, GetTeamMatchesByYearData, GetTeamMatchesByYearResponse, GetTeamMatchesByYearSimpleData, GetTeamMatchesByYearSimpleResponse, GetTeamMatchesByYearKeysData, GetTeamMatchesByYearKeysResponse, GetTeamMediaByYearData, GetTeamMediaByYearResponse, GetTeamMediaByTagData, GetTeamMediaByTagResponse, GetTeamMediaByTagYearData, GetTeamMediaByTagYearResponse, GetTeamSocialMediaData, GetTeamSocialMediaResponse, GetEventsByYearData, GetEventsByYearResponse, GetEventsByYearSimpleData, GetEventsByYearSimpleResponse, GetEventsByYearKeysData, GetEventsByYearKeysResponse, GetEventData, GetEventResponse, GetEventSimpleData, GetEventSimpleResponse, GetEventAlliancesData, GetEventAlliancesResponse, GetEventInsightsData, GetEventInsightsResponse, GetEventOpRsData, GetEventOpRsResponse, GetEventPredictionsData, GetEventPredictionsResponse, GetEventRankingsData, GetEventRankingsResponse, GetEventDistrictPointsData, GetEventDistrictPointsResponse, GetEventTeamsData, GetEventTeamsResponse, GetEventTeamsSimpleData, GetEventTeamsSimpleResponse, GetEventTeamsKeysData, GetEventTeamsKeysResponse, GetEventTeamsStatusesData, GetEventTeamsStatusesResponse, GetEventMatchesData, GetEventMatchesResponse, GetEventMatchesSimpleData, GetEventMatchesSimpleResponse, GetEventMatchesKeysData, GetEventMatchesKeysResponse, GetEventMatchTimeseriesData, GetEventMatchTimeseriesResponse, GetEventAwardsData, GetEventAwardsResponse, GetMatchData, GetMatchResponse, GetMatchSimpleData, GetMatchSimpleResponse, GetMatchTimeseriesData, GetMatchTimeseriesResponse, GetMatchZebraData, GetMatchZebraResponse, GetDistrictsByYearData, GetDistrictsByYearResponse, GetDistrictEventsData, GetDistrictEventsResponse, GetDistrictEventsSimpleData, GetDistrictEventsSimpleResponse, GetDistrictEventsKeysData, GetDistrictEventsKeysResponse, GetDistrictTeamsData, GetDistrictTeamsResponse, GetDistrictTeamsSimpleData, GetDistrictTeamsSimpleResponse, GetDistrictTeamsKeysData, GetDistrictTeamsKeysResponse, GetDistrictRankingsData, GetDistrictRankingsResponse } from './types.gen';

/**
 * Returns API status, and TBA status information.
 * @param data The data for the request.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns API_Status Successful response
 * @throws ApiError
 */
export const getStatus = (data: GetStatusData = {}): CancelablePromise<GetStatusResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/status',
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of `Team` objects, paginated in groups of 500.
 * @param data The data for the request.
 * @param data.pageNum Page number of results to return, zero-indexed
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team Successful response
 * @throws ApiError
 */
export const getTeams = (data: GetTeamsData): CancelablePromise<GetTeamsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/teams/{page_num}',
    path: {
        page_num: data.pageNum
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of short form `Team_Simple` objects, paginated in groups of 500.
 * @param data The data for the request.
 * @param data.pageNum Page number of results to return, zero-indexed
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team_Simple Successful response
 * @throws ApiError
 */
export const getTeamsSimple = (data: GetTeamsSimpleData): CancelablePromise<GetTeamsSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/teams/{page_num}/simple',
    path: {
        page_num: data.pageNum
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
 * @param data The data for the request.
 * @param data.pageNum Page number of results to return, zero-indexed
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns string Successful response
 * @throws ApiError
 */
export const getTeamsKeys = (data: GetTeamsKeysData): CancelablePromise<GetTeamsKeysResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/teams/{page_num}/keys',
    path: {
        page_num: data.pageNum
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of `Team` objects that competed in the given year, paginated in groups of 500.
 * @param data The data for the request.
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.pageNum Page number of results to return, zero-indexed
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team Successful response
 * @throws ApiError
 */
export const getTeamsByYear = (data: GetTeamsByYearData): CancelablePromise<GetTeamsByYearResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/teams/{year}/{page_num}',
    path: {
        year: data.year,
        page_num: data.pageNum
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500.
 * @param data The data for the request.
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.pageNum Page number of results to return, zero-indexed
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team_Simple Successful response
 * @throws ApiError
 */
export const getTeamsByYearSimple = (data: GetTeamsByYearSimpleData): CancelablePromise<GetTeamsByYearSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/teams/{year}/{page_num}/simple',
    path: {
        year: data.year,
        page_num: data.pageNum
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list Team Keys that competed in the given year, paginated in groups of 500.
 * @param data The data for the request.
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.pageNum Page number of results to return, zero-indexed
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns string Successful response
 * @throws ApiError
 */
export const getTeamsByYearKeys = (data: GetTeamsByYearKeysData): CancelablePromise<GetTeamsByYearKeysResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/teams/{year}/{page_num}/keys',
    path: {
        year: data.year,
        page_num: data.pageNum
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a `Team` object for the team referenced by the given key.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team Successful response
 * @throws ApiError
 */
export const getTeam = (data: GetTeamData): CancelablePromise<GetTeamResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}',
    path: {
        team_key: data.teamKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a `Team_Simple` object for the team referenced by the given key.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team_Simple Successful response
 * @throws ApiError
 */
export const getTeamSimple = (data: GetTeamSimpleData): CancelablePromise<GetTeamSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/simple',
    path: {
        team_key: data.teamKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of years in which the team participated in at least one competition.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns number Successful response
 * @throws ApiError
 */
export const getTeamYearsParticipated = (data: GetTeamYearsParticipatedData): CancelablePromise<GetTeamYearsParticipatedResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/years_participated',
    path: {
        team_key: data.teamKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns District_List Successful response
 * @throws ApiError
 */
export const getTeamDistricts = (data: GetTeamDistrictsData): CancelablePromise<GetTeamDistrictsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/districts',
    path: {
        team_key: data.teamKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team_Robot Successful response
 * @throws ApiError
 */
export const getTeamRobots = (data: GetTeamRobotsData): CancelablePromise<GetTeamRobotsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/robots',
    path: {
        team_key: data.teamKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of all events this team has competed at.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event Successful response
 * @throws ApiError
 */
export const getTeamEvents = (data: GetTeamEventsData): CancelablePromise<GetTeamEventsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/events',
    path: {
        team_key: data.teamKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a short-form list of all events this team has competed at.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event_Simple Successful response
 * @throws ApiError
 */
export const getTeamEventsSimple = (data: GetTeamEventsSimpleData): CancelablePromise<GetTeamEventsSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/events/simple',
    path: {
        team_key: data.teamKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of the event keys for all events this team has competed at.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns string Successful response
 * @throws ApiError
 */
export const getTeamEventsKeys = (data: GetTeamEventsKeysData): CancelablePromise<GetTeamEventsKeysResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/events/keys',
    path: {
        team_key: data.teamKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of events this team has competed at in the given year.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event Successful response
 * @throws ApiError
 */
export const getTeamEventsByYear = (data: GetTeamEventsByYearData): CancelablePromise<GetTeamEventsByYearResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/events/{year}',
    path: {
        team_key: data.teamKey,
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a short-form list of events this team has competed at in the given year.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event_Simple Successful response
 * @throws ApiError
 */
export const getTeamEventsByYearSimple = (data: GetTeamEventsByYearSimpleData): CancelablePromise<GetTeamEventsByYearSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/events/{year}/simple',
    path: {
        team_key: data.teamKey,
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of the event keys for events this team has competed at in the given year.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns string Successful response
 * @throws ApiError
 */
export const getTeamEventsByYearKeys = (data: GetTeamEventsByYearKeysData): CancelablePromise<GetTeamEventsByYearKeysResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/events/{year}/keys',
    path: {
        team_key: data.teamKey,
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a key-value list of the event statuses for events this team has competed at in the given year.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team_Event_Status Successful response
 * @throws ApiError
 */
export const getTeamEventsStatusesByYear = (data: GetTeamEventsStatusesByYearData): CancelablePromise<GetTeamEventsStatusesByYearResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/events/{year}/statuses',
    path: {
        team_key: data.teamKey,
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of matches for the given team and event.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Match Successful response
 * @throws ApiError
 */
export const getTeamEventMatches = (data: GetTeamEventMatchesData): CancelablePromise<GetTeamEventMatchesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/event/{event_key}/matches',
    path: {
        team_key: data.teamKey,
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a short-form list of matches for the given team and event.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Match Successful response
 * @throws ApiError
 */
export const getTeamEventMatchesSimple = (data: GetTeamEventMatchesSimpleData): CancelablePromise<GetTeamEventMatchesSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/event/{event_key}/matches/simple',
    path: {
        team_key: data.teamKey,
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of match keys for matches for the given team and event.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns string Successful response
 * @throws ApiError
 */
export const getTeamEventMatchesKeys = (data: GetTeamEventMatchesKeysData): CancelablePromise<GetTeamEventMatchesKeysResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/event/{event_key}/matches/keys',
    path: {
        team_key: data.teamKey,
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of awards the given team won at the given event.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Award Successful response
 * @throws ApiError
 */
export const getTeamEventAwards = (data: GetTeamEventAwardsData): CancelablePromise<GetTeamEventAwardsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/event/{event_key}/awards',
    path: {
        team_key: data.teamKey,
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets the competition rank and status of the team at the given event.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team_Event_Status Successful response
 * @throws ApiError
 */
export const getTeamEventStatus = (data: GetTeamEventStatusData): CancelablePromise<GetTeamEventStatusResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/event/{event_key}/status',
    path: {
        team_key: data.teamKey,
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of awards the given team has won.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Award Successful response
 * @throws ApiError
 */
export const getTeamAwards = (data: GetTeamAwardsData): CancelablePromise<GetTeamAwardsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/awards',
    path: {
        team_key: data.teamKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of awards the given team has won in a given year.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Award Successful response
 * @throws ApiError
 */
export const getTeamAwardsByYear = (data: GetTeamAwardsByYearData): CancelablePromise<GetTeamAwardsByYearResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/awards/{year}',
    path: {
        team_key: data.teamKey,
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of matches for the given team and year.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Match Successful response
 * @throws ApiError
 */
export const getTeamMatchesByYear = (data: GetTeamMatchesByYearData): CancelablePromise<GetTeamMatchesByYearResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/matches/{year}',
    path: {
        team_key: data.teamKey,
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a short-form list of matches for the given team and year.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Match_Simple Successful response
 * @throws ApiError
 */
export const getTeamMatchesByYearSimple = (data: GetTeamMatchesByYearSimpleData): CancelablePromise<GetTeamMatchesByYearSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/matches/{year}/simple',
    path: {
        team_key: data.teamKey,
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of match keys for matches for the given team and year.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns string Successful response
 * @throws ApiError
 */
export const getTeamMatchesByYearKeys = (data: GetTeamMatchesByYearKeysData): CancelablePromise<GetTeamMatchesByYearKeysResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/matches/{year}/keys',
    path: {
        team_key: data.teamKey,
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of Media (videos / pictures) for the given team and year.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Media Successful response
 * @throws ApiError
 */
export const getTeamMediaByYear = (data: GetTeamMediaByYearData): CancelablePromise<GetTeamMediaByYearResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/media/{year}',
    path: {
        team_key: data.teamKey,
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of Media (videos / pictures) for the given team and tag.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.mediaTag Media Tag which describes the Media.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Media Successful response
 * @throws ApiError
 */
export const getTeamMediaByTag = (data: GetTeamMediaByTagData): CancelablePromise<GetTeamMediaByTagResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/media/tag/{media_tag}',
    path: {
        team_key: data.teamKey,
        media_tag: data.mediaTag
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of Media (videos / pictures) for the given team, tag and year.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.mediaTag Media Tag which describes the Media.
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Media Successful response
 * @throws ApiError
 */
export const getTeamMediaByTagYear = (data: GetTeamMediaByTagYearData): CancelablePromise<GetTeamMediaByTagYearResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/media/tag/{media_tag}/{year}',
    path: {
        team_key: data.teamKey,
        media_tag: data.mediaTag,
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of Media (social media) for the given team.
 * @param data The data for the request.
 * @param data.teamKey TBA Team Key, eg `frc254`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Media Successful response
 * @throws ApiError
 */
export const getTeamSocialMedia = (data: GetTeamSocialMediaData): CancelablePromise<GetTeamSocialMediaResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/team/{team_key}/social_media',
    path: {
        team_key: data.teamKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of events in the given year.
 * @param data The data for the request.
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event Successful response
 * @throws ApiError
 */
export const getEventsByYear = (data: GetEventsByYearData): CancelablePromise<GetEventsByYearResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/events/{year}',
    path: {
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a short-form list of events in the given year.
 * @param data The data for the request.
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event_Simple Successful response
 * @throws ApiError
 */
export const getEventsByYearSimple = (data: GetEventsByYearSimpleData): CancelablePromise<GetEventsByYearSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/events/{year}/simple',
    path: {
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of event keys in the given year.
 * @param data The data for the request.
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns string Successful response
 * @throws ApiError
 */
export const getEventsByYearKeys = (data: GetEventsByYearKeysData): CancelablePromise<GetEventsByYearKeysResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/events/{year}/keys',
    path: {
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets an Event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event Successful response
 * @throws ApiError
 */
export const getEvent = (data: GetEventData): CancelablePromise<GetEventResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a short-form Event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event_Simple Successful response
 * @throws ApiError
 */
export const getEventSimple = (data: GetEventSimpleData): CancelablePromise<GetEventSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/simple',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of Elimination Alliances for the given Event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Elimination_Alliance Successful response
 * @throws ApiError
 */
export const getEventAlliances = (data: GetEventAlliancesData): CancelablePromise<GetEventAlliancesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/alliances',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a set of Event-specific insights for the given Event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event_Insights Successful response
 * @throws ApiError
 */
export const getEventInsights = (data: GetEventInsightsData): CancelablePromise<GetEventInsightsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/insights',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event_OPRs Successful response
 * @throws ApiError
 */
export const getEventOpRs = (data: GetEventOpRsData): CancelablePromise<GetEventOpRsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/oprs',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event_Predictions Successful response
 * @throws ApiError
 */
export const getEventPredictions = (data: GetEventPredictionsData): CancelablePromise<GetEventPredictionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/predictions',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of team rankings for the Event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event_Ranking Successful response
 * @throws ApiError
 */
export const getEventRankings = (data: GetEventRankingsData): CancelablePromise<GetEventRankingsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/rankings',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of team rankings for the Event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event_District_Points Successful response
 * @throws ApiError
 */
export const getEventDistrictPoints = (data: GetEventDistrictPointsData): CancelablePromise<GetEventDistrictPointsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/district_points',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of `Team` objects that competed in the given event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team Successful response
 * @throws ApiError
 */
export const getEventTeams = (data: GetEventTeamsData): CancelablePromise<GetEventTeamsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/teams',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a short-form list of `Team` objects that competed in the given event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team_Simple Successful response
 * @throws ApiError
 */
export const getEventTeamsSimple = (data: GetEventTeamsSimpleData): CancelablePromise<GetEventTeamsSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/teams/simple',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of `Team` keys that competed in the given event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns string Successful response
 * @throws ApiError
 */
export const getEventTeamsKeys = (data: GetEventTeamsKeysData): CancelablePromise<GetEventTeamsKeysResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/teams/keys',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a key-value list of the event statuses for teams competing at the given event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team_Event_Status Successful response
 * @throws ApiError
 */
export const getEventTeamsStatuses = (data: GetEventTeamsStatusesData): CancelablePromise<GetEventTeamsStatusesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/teams/statuses',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of matches for the given event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Match Successful response
 * @throws ApiError
 */
export const getEventMatches = (data: GetEventMatchesData): CancelablePromise<GetEventMatchesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/matches',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a short-form list of matches for the given event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Match_Simple Successful response
 * @throws ApiError
 */
export const getEventMatchesSimple = (data: GetEventMatchesSimpleData): CancelablePromise<GetEventMatchesSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/matches/simple',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of match keys for the given event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns string Successful response
 * @throws ApiError
 */
export const getEventMatchesKeys = (data: GetEventMatchesKeysData): CancelablePromise<GetEventMatchesKeysResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/matches/keys',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data.
 * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
 * *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns string Successful response
 * @throws ApiError
 */
export const getEventMatchTimeseries = (data: GetEventMatchTimeseriesData): CancelablePromise<GetEventMatchTimeseriesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/matches/timeseries',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of awards from the given event.
 * @param data The data for the request.
 * @param data.eventKey TBA Event Key, eg `2016nytr`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Award Successful response
 * @throws ApiError
 */
export const getEventAwards = (data: GetEventAwardsData): CancelablePromise<GetEventAwardsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/event/{event_key}/awards',
    path: {
        event_key: data.eventKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a `Match` object for the given match key.
 * @param data The data for the request.
 * @param data.matchKey TBA Match Key, eg `2016nytr_qm1`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Match Successful response
 * @throws ApiError
 */
export const getMatch = (data: GetMatchData): CancelablePromise<GetMatchResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/match/{match_key}',
    path: {
        match_key: data.matchKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a short-form `Match` object for the given match key.
 * @param data The data for the request.
 * @param data.matchKey TBA Match Key, eg `2016nytr_qm1`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Match_Simple Successful response
 * @throws ApiError
 */
export const getMatchSimple = (data: GetMatchSimpleData): CancelablePromise<GetMatchSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/match/{match_key}/simple',
    path: {
        match_key: data.matchKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available.
 * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
 * *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
 * @param data The data for the request.
 * @param data.matchKey TBA Match Key, eg `2016nytr_qm1`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns unknown Successful response
 * @throws ApiError
 */
export const getMatchTimeseries = (data: GetMatchTimeseriesData): CancelablePromise<GetMatchTimeseriesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/match/{match_key}/timeseries',
    path: {
        match_key: data.matchKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets Zebra MotionWorks data for a Match for the given match key.
 * @param data The data for the request.
 * @param data.matchKey TBA Match Key, eg `2016nytr_qm1`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Zebra Successful response
 * @throws ApiError
 */
export const getMatchZebra = (data: GetMatchZebraData): CancelablePromise<GetMatchZebraResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/match/{match_key}/zebra_motionworks',
    path: {
        match_key: data.matchKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of districts and their corresponding district key, for the given year.
 * @param data The data for the request.
 * @param data.year Competition Year (or Season). Must be 4 digits.
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns District_List Successful response
 * @throws ApiError
 */
export const getDistrictsByYear = (data: GetDistrictsByYearData): CancelablePromise<GetDistrictsByYearResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/districts/{year}',
    path: {
        year: data.year
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of events in the given district.
 * @param data The data for the request.
 * @param data.districtKey TBA District Key, eg `2016fim`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event Successful response
 * @throws ApiError
 */
export const getDistrictEvents = (data: GetDistrictEventsData): CancelablePromise<GetDistrictEventsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/district/{district_key}/events',
    path: {
        district_key: data.districtKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a short-form list of events in the given district.
 * @param data The data for the request.
 * @param data.districtKey TBA District Key, eg `2016fim`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Event_Simple Successful response
 * @throws ApiError
 */
export const getDistrictEventsSimple = (data: GetDistrictEventsSimpleData): CancelablePromise<GetDistrictEventsSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/district/{district_key}/events/simple',
    path: {
        district_key: data.districtKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of event keys for events in the given district.
 * @param data The data for the request.
 * @param data.districtKey TBA District Key, eg `2016fim`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns string Successful response
 * @throws ApiError
 */
export const getDistrictEventsKeys = (data: GetDistrictEventsKeysData): CancelablePromise<GetDistrictEventsKeysResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/district/{district_key}/events/keys',
    path: {
        district_key: data.districtKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of `Team` objects that competed in events in the given district.
 * @param data The data for the request.
 * @param data.districtKey TBA District Key, eg `2016fim`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team Successful response
 * @throws ApiError
 */
export const getDistrictTeams = (data: GetDistrictTeamsData): CancelablePromise<GetDistrictTeamsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/district/{district_key}/teams',
    path: {
        district_key: data.districtKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a short-form list of `Team` objects that competed in events in the given district.
 * @param data The data for the request.
 * @param data.districtKey TBA District Key, eg `2016fim`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns Team_Simple Successful response
 * @throws ApiError
 */
export const getDistrictTeamsSimple = (data: GetDistrictTeamsSimpleData): CancelablePromise<GetDistrictTeamsSimpleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/district/{district_key}/teams/simple',
    path: {
        district_key: data.districtKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of `Team` objects that competed in events in the given district.
 * @param data The data for the request.
 * @param data.districtKey TBA District Key, eg `2016fim`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns string Successful response
 * @throws ApiError
 */
export const getDistrictTeamsKeys = (data: GetDistrictTeamsKeysData): CancelablePromise<GetDistrictTeamsKeysResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/district/{district_key}/teams/keys',
    path: {
        district_key: data.districtKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };

/**
 * Gets a list of team district rankings for the given district.
 * @param data The data for the request.
 * @param data.districtKey TBA District Key, eg `2016fim`
 * @param data.ifNoneMatch Value of the `ETag` header in the most recently cached response by the client.
 * @returns District_Ranking Successful response
 * @throws ApiError
 */
export const getDistrictRankings = (data: GetDistrictRankingsData): CancelablePromise<GetDistrictRankingsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/district/{district_key}/rankings',
    path: {
        district_key: data.districtKey
    },
    headers: {
        'If-None-Match': data.ifNoneMatch
    },
    errors: {
        304: 'Not Modified - Use Local Cached Value',
        401: 'Authorization information is missing or invalid.'
    }
}); };