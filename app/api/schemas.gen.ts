// This file is auto-generated by @hey-api/openapi-ts

export const $API_Status = {
    required: ['android', 'current_season', 'down_events', 'ios', 'is_datafeed_down', 'max_season'],
    type: 'object',
    properties: {
        current_season: {
            type: 'integer',
            description: 'Year of the current FRC season.'
        },
        max_season: {
            type: 'integer',
            description: 'Maximum FRC season year for valid queries.'
        },
        is_datafeed_down: {
            type: 'boolean',
            description: 'True if the entire FMS API provided by FIRST is down.'
        },
        down_events: {
            type: 'array',
            description: 'An array of strings containing event keys of any active events that are no longer updating.',
            items: {
                type: 'string'
            }
        },
        ios: {
            '$ref': '#/components/schemas/API_Status_App_Version'
        },
        android: {
            '$ref': '#/components/schemas/API_Status_App_Version'
        }
    }
} as const;

export const $API_Status_App_Version = {
    required: ['latest_app_version', 'min_app_version'],
    type: 'object',
    properties: {
        min_app_version: {
            type: 'integer',
            description: 'Internal use - Minimum application version required to correctly connect and process data.'
        },
        latest_app_version: {
            type: 'integer',
            description: 'Internal use - Latest application version available.'
        }
    }
} as const;

export const $Team_Simple = {
    required: ['key', 'name', 'team_number'],
    type: 'object',
    properties: {
        key: {
            type: 'string',
            description: 'TBA team key with the format `frcXXXX` with `XXXX` representing the team number.'
        },
        team_number: {
            type: 'integer',
            description: 'Official team number issued by FIRST.'
        },
        nickname: {
            type: 'string',
            description: 'Team nickname provided by FIRST.'
        },
        name: {
            type: 'string',
            description: 'Official long name registered with FIRST.'
        },
        city: {
            type: 'string',
            description: 'City of team derived from parsing the address registered with FIRST.'
        },
        state_prov: {
            type: 'string',
            description: 'State of team derived from parsing the address registered with FIRST.'
        },
        country: {
            type: 'string',
            description: 'Country of team derived from parsing the address registered with FIRST.'
        }
    }
} as const;

export const $Team = {
    required: ['key', 'name', 'team_number'],
    type: 'object',
    properties: {
        key: {
            type: 'string',
            description: 'TBA team key with the format `frcXXXX` with `XXXX` representing the team number.'
        },
        team_number: {
            type: 'integer',
            description: 'Official team number issued by FIRST.'
        },
        nickname: {
            type: 'string',
            description: 'Team nickname provided by FIRST.'
        },
        name: {
            type: 'string',
            description: 'Official long name registered with FIRST.'
        },
        school_name: {
            type: 'string',
            description: 'Name of team school or affilited group registered with FIRST.'
        },
        city: {
            type: 'string',
            description: 'City of team derived from parsing the address registered with FIRST.'
        },
        state_prov: {
            type: 'string',
            description: 'State of team derived from parsing the address registered with FIRST.'
        },
        country: {
            type: 'string',
            description: 'Country of team derived from parsing the address registered with FIRST.'
        },
        address: {
            type: 'string',
            description: 'Will be NULL, for future development.'
        },
        postal_code: {
            type: 'string',
            description: 'Postal code from the team address.'
        },
        gmaps_place_id: {
            type: 'string',
            description: 'Will be NULL, for future development.'
        },
        gmaps_url: {
            type: 'string',
            description: 'Will be NULL, for future development.',
            format: 'url'
        },
        lat: {
            type: 'number',
            description: 'Will be NULL, for future development.',
            format: 'double'
        },
        lng: {
            type: 'number',
            description: 'Will be NULL, for future development.',
            format: 'double'
        },
        location_name: {
            type: 'string',
            description: 'Will be NULL, for future development.'
        },
        website: {
            type: 'string',
            description: 'Official website associated with the team.',
            format: 'url'
        },
        rookie_year: {
            type: 'integer',
            description: 'First year the team officially competed.'
        },
        motto: {
            type: 'string',
            description: "Team's motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019."
        },
        home_championship: {
            type: 'object',
            properties: {},
            description: "Location of the team's home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value."
        }
    }
} as const;

export const $Team_Robot = {
    required: ['key', 'robot_name', 'team_key', 'year'],
    type: 'object',
    properties: {
        year: {
            type: 'integer',
            description: 'Year this robot competed in.'
        },
        robot_name: {
            type: 'string',
            description: 'Name of the robot as provided by the team.'
        },
        key: {
            type: 'string',
            description: 'Internal TBA identifier for this robot.'
        },
        team_key: {
            type: 'string',
            description: 'TBA team key for this robot.'
        }
    }
} as const;

export const $Event_Simple = {
    required: ['end_date', 'event_code', 'event_type', 'key', 'name', 'start_date', 'year'],
    type: 'object',
    properties: {
        key: {
            type: 'string',
            description: 'TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.'
        },
        name: {
            type: 'string',
            description: 'Official name of event on record either provided by FIRST or organizers of offseason event.'
        },
        event_code: {
            type: 'string',
            description: 'Event short code, as provided by FIRST.'
        },
        event_type: {
            type: 'integer',
            description: 'Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2'
        },
        district: {
            '$ref': '#/components/schemas/District_List'
        },
        city: {
            type: 'string',
            description: 'City, town, village, etc. the event is located in.'
        },
        state_prov: {
            type: 'string',
            description: 'State or Province the event is located in.'
        },
        country: {
            type: 'string',
            description: 'Country the event is located in.'
        },
        start_date: {
            type: 'string',
            description: 'Event start date in `yyyy-mm-dd` format.',
            format: 'date'
        },
        end_date: {
            type: 'string',
            description: 'Event end date in `yyyy-mm-dd` format.',
            format: 'date'
        },
        year: {
            type: 'integer',
            description: 'Year the event data is for.'
        }
    }
} as const;

export const $Event = {
    required: ['end_date', 'event_code', 'event_type', 'event_type_string', 'key', 'name', 'start_date', 'year'],
    type: 'object',
    properties: {
        key: {
            type: 'string',
            description: 'TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.'
        },
        name: {
            type: 'string',
            description: 'Official name of event on record either provided by FIRST or organizers of offseason event.'
        },
        event_code: {
            type: 'string',
            description: 'Event short code, as provided by FIRST.'
        },
        event_type: {
            type: 'integer',
            description: 'Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2'
        },
        district: {
            '$ref': '#/components/schemas/District_List'
        },
        city: {
            type: 'string',
            description: 'City, town, village, etc. the event is located in.'
        },
        state_prov: {
            type: 'string',
            description: 'State or Province the event is located in.'
        },
        country: {
            type: 'string',
            description: 'Country the event is located in.'
        },
        start_date: {
            type: 'string',
            description: 'Event start date in `yyyy-mm-dd` format.',
            format: 'date'
        },
        end_date: {
            type: 'string',
            description: 'Event end date in `yyyy-mm-dd` format.',
            format: 'date'
        },
        year: {
            type: 'integer',
            description: 'Year the event data is for.'
        },
        short_name: {
            type: 'string',
            description: "Same as `name` but doesn't include event specifiers, such as 'Regional' or 'District'. May be null."
        },
        event_type_string: {
            type: 'string',
            description: 'Event Type, eg Regional, District, or Offseason.'
        },
        week: {
            type: 'integer',
            description: "Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 'preseason' event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)"
        },
        address: {
            type: 'string',
            description: "Address of the event's venue, if available."
        },
        postal_code: {
            type: 'string',
            description: 'Postal code from the event address.'
        },
        gmaps_place_id: {
            type: 'string',
            description: 'Google Maps Place ID for the event address.'
        },
        gmaps_url: {
            type: 'string',
            description: 'Link to address location on Google Maps.',
            format: 'url'
        },
        lat: {
            type: 'number',
            description: 'Latitude for the event address.',
            format: 'double'
        },
        lng: {
            type: 'number',
            description: 'Longitude for the event address.',
            format: 'double'
        },
        location_name: {
            type: 'string',
            description: 'Name of the location at the address for the event, eg. Blue Alliance High School.'
        },
        timezone: {
            type: 'string',
            description: 'Timezone name.'
        },
        website: {
            type: 'string',
            description: "The event's website, if any."
        },
        first_event_id: {
            type: 'string',
            description: 'The FIRST internal Event ID, used to link to the event on the FRC webpage.'
        },
        first_event_code: {
            type: 'string',
            description: 'Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)'
        },
        webcasts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Webcast'
            }
        },
        division_keys: {
            type: 'array',
            description: 'An array of event keys for the divisions at this event.',
            items: {
                type: 'string'
            }
        },
        parent_event_key: {
            type: 'string',
            description: "The TBA Event key that represents the event's parent. Used to link back to the event from a division event. It is also the inverse relation of `divison_keys`."
        },
        playoff_type: {
            type: 'integer',
            description: 'Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null.'
        },
        playoff_type_string: {
            type: 'string',
            description: 'String representation of the `playoff_type`, or null.'
        }
    }
} as const;

export const $Team_Event_Status = {
    type: 'object',
    properties: {
        qual: {
            '$ref': '#/components/schemas/Team_Event_Status_rank'
        },
        alliance: {
            '$ref': '#/components/schemas/Team_Event_Status_alliance'
        },
        playoff: {
            '$ref': '#/components/schemas/Team_Event_Status_playoff'
        },
        alliance_status_str: {
            type: 'string',
            description: "An HTML formatted string suitable for display to the user containing the team's alliance pick status."
        },
        playoff_status_str: {
            type: 'string',
            description: "An HTML formatter string suitable for display to the user containing the team's playoff status."
        },
        overall_status_str: {
            type: 'string',
            description: "An HTML formatted string suitable for display to the user containing the team's overall status summary of the event."
        },
        next_match_key: {
            type: 'string',
            description: 'TBA match key for the next match the team is scheduled to play in at this event, or null.'
        },
        last_match_key: {
            type: 'string',
            description: 'TBA match key for the last match the team played in at this event, or null.'
        }
    }
} as const;

export const $Team_Event_Status_rank = {
    type: 'object',
    properties: {
        num_teams: {
            type: 'integer',
            description: 'Number of teams ranked.'
        },
        ranking: {
            type: 'object',
            properties: {
                matches_played: {
                    type: 'integer',
                    description: 'Number of matches played.'
                },
                qual_average: {
                    type: 'number',
                    description: 'For some years, average qualification score. Can be null.',
                    format: 'double'
                },
                sort_orders: {
                    type: 'array',
                    description: 'Ordered list of values used to determine the rank. See the `sort_order_info` property for the name of each value.',
                    items: {
                        type: 'number'
                    }
                },
                record: {
                    '$ref': '#/components/schemas/WLT_Record'
                },
                rank: {
                    type: 'integer',
                    description: 'Relative rank of this team.'
                },
                dq: {
                    type: 'integer',
                    description: 'Number of matches the team was disqualified for.'
                },
                team_key: {
                    type: 'string',
                    description: 'TBA team key for this rank.'
                }
            }
        },
        sort_order_info: {
            type: 'array',
            description: 'Ordered list of names corresponding to the elements of the `sort_orders` array.',
            items: {
                type: 'object',
                properties: {
                    precision: {
                        type: 'integer',
                        description: 'The number of digits of precision used for this value, eg `2` would correspond to a value of `101.11` while `0` would correspond to `101`.'
                    },
                    name: {
                        type: 'string',
                        description: 'The descriptive name of the value used to sort the ranking.'
                    }
                }
            }
        },
        status: {
            type: 'string'
        }
    }
} as const;

export const $Team_Event_Status_alliance = {
    required: ['number', 'pick'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Alliance name, may be null.'
        },
        number: {
            type: 'integer',
            description: 'Alliance number.'
        },
        backup: {
            '$ref': '#/components/schemas/Team_Event_Status_alliance_backup'
        },
        pick: {
            type: 'integer',
            description: 'Order the team was picked in the alliance from 0-2, with 0 being alliance captain.'
        }
    }
} as const;

export const $Team_Event_Status_alliance_backup = {
    type: 'object',
    properties: {
        out: {
            type: 'string',
            description: 'TBA key for the team replaced by the backup.'
        },
        in: {
            type: 'string',
            description: 'TBA key for the backup team called in.'
        }
    },
    description: 'Backup status, may be null.'
} as const;

export const $Team_Event_Status_playoff = {
    type: 'object',
    properties: {
        level: {
            type: 'string',
            description: 'The highest playoff level the team reached.',
            enum: ['qm', 'ef', 'qf', 'sf', 'f']
        },
        current_level_record: {
            '$ref': '#/components/schemas/WLT_Record'
        },
        record: {
            '$ref': '#/components/schemas/WLT_Record'
        },
        status: {
            type: 'string',
            description: 'Current competition status for the playoffs.',
            enum: ['won', 'eliminated', 'playing']
        },
        playoff_average: {
            type: 'integer',
            description: 'The average match score during playoffs. Year specific. May be null if not relevant for a given year.'
        }
    },
    description: 'Playoff status for this team, may be null if the team did not make playoffs, or playoffs have not begun.'
} as const;

export const $Event_Ranking = {
    required: ['rankings', 'sort_order_info'],
    type: 'object',
    properties: {
        rankings: {
            type: 'array',
            description: 'List of rankings at the event.',
            items: {
                required: ['dq', 'matches_played', 'rank', 'record', 'team_key'],
                type: 'object',
                properties: {
                    matches_played: {
                        type: 'integer',
                        description: 'Number of matches played by this team.'
                    },
                    qual_average: {
                        type: 'integer',
                        description: 'The average match score during qualifications. Year specific. May be null if not relevant for a given year.'
                    },
                    extra_stats: {
                        type: 'array',
                        description: "Additional special data on the team's performance calculated by TBA.",
                        items: {
                            type: 'number'
                        }
                    },
                    sort_orders: {
                        type: 'array',
                        description: 'Additional year-specific information, may be null. See parent `sort_order_info` for details.',
                        items: {
                            type: 'number'
                        }
                    },
                    record: {
                        '$ref': '#/components/schemas/WLT_Record'
                    },
                    rank: {
                        type: 'integer',
                        description: "The team's rank at the event as provided by FIRST."
                    },
                    dq: {
                        type: 'integer',
                        description: 'Number of times disqualified.'
                    },
                    team_key: {
                        type: 'string',
                        description: 'The team with this rank.'
                    }
                }
            }
        },
        extra_stats_info: {
            type: 'array',
            description: 'List of special TBA-generated values provided in the `extra_stats` array for each item.',
            items: {
                required: ['name', 'precision'],
                type: 'object',
                properties: {
                    precision: {
                        type: 'number',
                        description: 'Integer expressing the number of digits of precision in the number provided in `sort_orders`.'
                    },
                    name: {
                        type: 'string',
                        description: 'Name of the field used in the `extra_stats` array.'
                    }
                }
            }
        },
        sort_order_info: {
            type: 'array',
            description: 'List of year-specific values provided in the `sort_orders` array for each team.',
            items: {
                required: ['name', 'precision'],
                type: 'object',
                properties: {
                    precision: {
                        type: 'integer',
                        description: 'Integer expressing the number of digits of precision in the number provided in `sort_orders`.'
                    },
                    name: {
                        type: 'string',
                        description: 'Name of the field used in the `sort_order` array.'
                    }
                }
            }
        }
    }
} as const;

export const $Event_District_Points = {
    required: ['points'],
    type: 'object',
    properties: {
        points: {
            type: 'object',
            additionalProperties: {
                required: ['alliance_points', 'award_points', 'elim_points', 'qual_points', 'total'],
                type: 'object',
                properties: {
                    total: {
                        type: 'integer',
                        description: 'Total points awarded at this event.'
                    },
                    alliance_points: {
                        type: 'integer',
                        description: 'Points awarded for alliance selection'
                    },
                    elim_points: {
                        type: 'integer',
                        description: 'Points awarded for elimination match performance.'
                    },
                    award_points: {
                        type: 'integer',
                        description: 'Points awarded for event awards.'
                    },
                    qual_points: {
                        type: 'integer',
                        description: 'Points awarded for qualification match performance.'
                    }
                }
            },
            description: 'Points gained for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the points as its value.'
        },
        tiebreakers: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    highest_qual_scores: {
                        type: 'array',
                        items: {
                            type: 'integer'
                        }
                    },
                    qual_wins: {
                        type: 'integer'
                    }
                }
            },
            description: 'Tiebreaker values for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the tiebreaker elements as its value.'
        }
    }
} as const;

export const $Event_Insights = {
    type: 'object',
    properties: {
        qual: {
            type: 'object',
            properties: {},
            description: 'Inights for the qualification round of an event'
        },
        playoff: {
            type: 'object',
            properties: {},
            description: 'Insights for the playoff round of an event'
        }
    },
    description: 'A year-specific event insight object expressed as a JSON string, separated in to `qual` and `playoff` fields. See also Event_Insights_2016, Event_Insights_2017, etc.'
} as const;

export const $Event_Insights_2016 = {
    required: ['A_ChevalDeFrise', 'A_Portcullis', 'B_Moat', 'B_Ramparts', 'C_Drawbridge', 'C_SallyPort', 'D_RockWall', 'D_RoughTerrain', 'LowBar', 'average_auto_score', 'average_boulder_score', 'average_crossing_score', 'average_foul_score', 'average_high_goals', 'average_low_goals', 'average_score', 'average_tower_score', 'average_win_margin', 'average_win_score', 'breaches', 'captures', 'challenges', 'high_score', 'scales'],
    type: 'object',
    properties: {
        LowBar: {
            type: 'array',
            description: 'For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        A_ChevalDeFrise: {
            type: 'array',
            description: 'For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        A_Portcullis: {
            type: 'array',
            description: 'For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        B_Ramparts: {
            type: 'array',
            description: 'For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        B_Moat: {
            type: 'array',
            description: 'For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        C_SallyPort: {
            type: 'array',
            description: 'For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        C_Drawbridge: {
            type: 'array',
            description: 'For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        D_RoughTerrain: {
            type: 'array',
            description: 'For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        D_RockWall: {
            type: 'array',
            description: 'For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        average_high_goals: {
            type: 'number',
            description: 'Average number of high goals scored.',
            format: 'float'
        },
        average_low_goals: {
            type: 'number',
            description: 'Average number of low goals scored.',
            format: 'float'
        },
        breaches: {
            type: 'array',
            description: 'An array with three values, number of times breached, number of opportunities to breach, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        scales: {
            type: 'array',
            description: 'An array with three values, number of times scaled, number of opportunities to scale, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        challenges: {
            type: 'array',
            description: 'An array with three values, number of times challenged, number of opportunities to challenge, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        captures: {
            type: 'array',
            description: 'An array with three values, number of times captured, number of opportunities to capture, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        average_win_score: {
            type: 'number',
            description: 'Average winning score.',
            format: 'float'
        },
        average_win_margin: {
            type: 'number',
            description: 'Average margin of victory.',
            format: 'float'
        },
        average_score: {
            type: 'number',
            description: 'Average total score.',
            format: 'float'
        },
        average_auto_score: {
            type: 'number',
            description: 'Average autonomous score.',
            format: 'float'
        },
        average_crossing_score: {
            type: 'number',
            description: 'Average crossing score.',
            format: 'float'
        },
        average_boulder_score: {
            type: 'number',
            description: 'Average boulder score.',
            format: 'float'
        },
        average_tower_score: {
            type: 'number',
            description: 'Average tower score.',
            format: 'float'
        },
        average_foul_score: {
            type: 'number',
            description: 'Average foul score.',
            format: 'float'
        },
        high_score: {
            type: 'array',
            description: 'An array with three values, high score, match key from the match with the high score, and the name of the match.',
            items: {
                type: 'string'
            }
        }
    },
    description: 'Insights for FIRST Stronghold qualification and elimination matches.'
} as const;

export const $Event_Insights_2017 = {
    required: ['average_foul_score', 'average_fuel_points', 'average_fuel_points_auto', 'average_fuel_points_teleop', 'average_high_goals', 'average_high_goals_auto', 'average_high_goals_teleop', 'average_low_goals', 'average_low_goals_auto', 'average_low_goals_teleop', 'average_mobility_points_auto', 'average_points_auto', 'average_points_teleop', 'average_rotor_points', 'average_rotor_points_auto', 'average_rotor_points_teleop', 'average_score', 'average_takeoff_points_teleop', 'average_win_margin', 'average_win_score', 'high_kpa', 'high_score', 'kpa_achieved', 'mobility_counts', 'rotor_1_engaged', 'rotor_1_engaged_auto', 'rotor_2_engaged', 'rotor_2_engaged_auto', 'rotor_3_engaged', 'rotor_4_engaged', 'takeoff_counts', 'unicorn_matches'],
    type: 'object',
    properties: {
        average_foul_score: {
            type: 'number',
            description: 'Average foul score.',
            format: 'float'
        },
        average_fuel_points: {
            type: 'number',
            description: 'Average fuel points scored.',
            format: 'float'
        },
        average_fuel_points_auto: {
            type: 'number',
            description: 'Average fuel points scored during auto.',
            format: 'float'
        },
        average_fuel_points_teleop: {
            type: 'number',
            description: 'Average fuel points scored during teleop.',
            format: 'float'
        },
        average_high_goals: {
            type: 'number',
            description: 'Average points scored in the high goal.',
            format: 'float'
        },
        average_high_goals_auto: {
            type: 'number',
            description: 'Average points scored in the high goal during auto.',
            format: 'float'
        },
        average_high_goals_teleop: {
            type: 'number',
            description: 'Average points scored in the high goal during teleop.',
            format: 'float'
        },
        average_low_goals: {
            type: 'number',
            description: 'Average points scored in the low goal.',
            format: 'float'
        },
        average_low_goals_auto: {
            type: 'number',
            description: 'Average points scored in the low goal during auto.',
            format: 'float'
        },
        average_low_goals_teleop: {
            type: 'number',
            description: 'Average points scored in the low goal during teleop.',
            format: 'float'
        },
        average_mobility_points_auto: {
            type: 'number',
            description: 'Average mobility points scored during auto.',
            format: 'float'
        },
        average_points_auto: {
            type: 'number',
            description: 'Average points scored during auto.',
            format: 'float'
        },
        average_points_teleop: {
            type: 'number',
            description: 'Average points scored during teleop.',
            format: 'float'
        },
        average_rotor_points: {
            type: 'number',
            description: 'Average rotor points scored.',
            format: 'float'
        },
        average_rotor_points_auto: {
            type: 'number',
            description: 'Average rotor points scored during auto.',
            format: 'float'
        },
        average_rotor_points_teleop: {
            type: 'number',
            description: 'Average rotor points scored during teleop.',
            format: 'float'
        },
        average_score: {
            type: 'number',
            description: 'Average score.',
            format: 'float'
        },
        average_takeoff_points_teleop: {
            type: 'number',
            description: 'Average takeoff points scored during teleop.',
            format: 'float'
        },
        average_win_margin: {
            type: 'number',
            description: 'Average margin of victory.',
            format: 'float'
        },
        average_win_score: {
            type: 'number',
            description: 'Average winning score.',
            format: 'float'
        },
        high_kpa: {
            type: 'array',
            description: 'An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match',
            items: {
                type: 'string'
            }
        },
        high_score: {
            type: 'array',
            description: 'An array with three values, high score, match key from the match with the high score, and the name of the match',
            items: {
                type: 'string'
            }
        },
        kpa_achieved: {
            type: 'array',
            description: 'An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        mobility_counts: {
            type: 'array',
            description: 'An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        rotor_1_engaged: {
            type: 'array',
            description: 'An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        rotor_1_engaged_auto: {
            type: 'array',
            description: 'An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        rotor_2_engaged: {
            type: 'array',
            description: 'An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        rotor_2_engaged_auto: {
            type: 'array',
            description: 'An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        rotor_3_engaged: {
            type: 'array',
            description: 'An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        rotor_4_engaged: {
            type: 'array',
            description: 'An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        takeoff_counts: {
            type: 'array',
            description: 'An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        unicorn_matches: {
            type: 'array',
            description: 'An array with three values, number of times a unicorn match (Win + kPa & Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        }
    },
    description: 'Insights for FIRST STEAMWORKS qualification and elimination matches.'
} as const;

export const $Event_Insights_2018 = {
    required: ['auto_quest_achieved', 'average_boost_played', 'average_endgame_points', 'average_force_played', 'average_foul_score', 'average_points_auto', 'average_points_teleop', 'average_run_points_auto', 'average_scale_ownership_points', 'average_scale_ownership_points_auto', 'average_scale_ownership_points_teleop', 'average_score', 'average_switch_ownership_points', 'average_switch_ownership_points_auto', 'average_switch_ownership_points_teleop', 'average_vault_points', 'average_win_margin', 'average_win_score', 'boost_played_counts', 'climb_counts', 'face_the_boss_achieved', 'force_played_counts', 'high_score', 'levitate_played_counts', 'run_counts_auto', 'scale_neutral_percentage', 'scale_neutral_percentage_auto', 'scale_neutral_percentage_teleop', 'switch_owned_counts_auto', 'unicorn_matches', 'winning_opp_switch_denial_percentage_teleop', 'winning_own_switch_ownership_percentage', 'winning_own_switch_ownership_percentage_auto', 'winning_own_switch_ownership_percentage_teleop', 'winning_scale_ownership_percentage', 'winning_scale_ownership_percentage_auto', 'winning_scale_ownership_percentage_teleop'],
    type: 'object',
    properties: {
        auto_quest_achieved: {
            type: 'array',
            description: 'An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        average_boost_played: {
            type: 'number',
            description: 'Average number of boost power up scored (out of 3).',
            format: 'float'
        },
        average_endgame_points: {
            type: 'number',
            description: 'Average endgame points.',
            format: 'float'
        },
        average_force_played: {
            type: 'number',
            description: 'Average number of force power up scored (out of 3).',
            format: 'float'
        },
        average_foul_score: {
            type: 'number',
            description: 'Average foul score.',
            format: 'float'
        },
        average_points_auto: {
            type: 'number',
            description: 'Average points scored during auto.',
            format: 'float'
        },
        average_points_teleop: {
            type: 'number',
            description: 'Average points scored during teleop.',
            format: 'float'
        },
        average_run_points_auto: {
            type: 'number',
            description: 'Average mobility points scored during auto.',
            format: 'float'
        },
        average_scale_ownership_points: {
            type: 'number',
            description: 'Average scale ownership points scored.',
            format: 'float'
        },
        average_scale_ownership_points_auto: {
            type: 'number',
            description: 'Average scale ownership points scored during auto.',
            format: 'float'
        },
        average_scale_ownership_points_teleop: {
            type: 'number',
            description: 'Average scale ownership points scored during teleop.',
            format: 'float'
        },
        average_score: {
            type: 'number',
            description: 'Average score.',
            format: 'float'
        },
        average_switch_ownership_points: {
            type: 'number',
            description: 'Average switch ownership points scored.',
            format: 'float'
        },
        average_switch_ownership_points_auto: {
            type: 'number',
            description: 'Average switch ownership points scored during auto.',
            format: 'float'
        },
        average_switch_ownership_points_teleop: {
            type: 'number',
            description: 'Average switch ownership points scored during teleop.',
            format: 'float'
        },
        average_vault_points: {
            type: 'number',
            description: 'Average value points scored.',
            format: 'float'
        },
        average_win_margin: {
            type: 'number',
            description: 'Average margin of victory.',
            format: 'float'
        },
        average_win_score: {
            type: 'number',
            description: 'Average winning score.',
            format: 'float'
        },
        boost_played_counts: {
            type: 'array',
            description: 'An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        climb_counts: {
            type: 'array',
            description: 'An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        face_the_boss_achieved: {
            type: 'array',
            description: 'An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        force_played_counts: {
            type: 'array',
            description: 'An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        high_score: {
            type: 'array',
            description: 'An array with three values, high score, match key from the match with the high score, and the name of the match',
            items: {
                type: 'string'
            }
        },
        levitate_played_counts: {
            type: 'array',
            description: 'An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        run_counts_auto: {
            type: 'array',
            description: 'An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        scale_neutral_percentage: {
            type: 'number',
            description: 'Average scale neutral percentage.',
            format: 'float'
        },
        scale_neutral_percentage_auto: {
            type: 'number',
            description: 'Average scale neutral percentage during auto.',
            format: 'float'
        },
        scale_neutral_percentage_teleop: {
            type: 'number',
            description: 'Average scale neutral percentage during teleop.',
            format: 'float'
        },
        switch_owned_counts_auto: {
            type: 'array',
            description: 'An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        unicorn_matches: {
            type: 'array',
            description: 'An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.',
            items: {
                type: 'number',
                format: 'float'
            }
        },
        winning_opp_switch_denial_percentage_teleop: {
            type: 'number',
            description: 'Average opposing switch denail percentage for the winning alliance during teleop.',
            format: 'float'
        },
        winning_own_switch_ownership_percentage: {
            type: 'number',
            description: 'Average own switch ownership percentage for the winning alliance.',
            format: 'float'
        },
        winning_own_switch_ownership_percentage_auto: {
            type: 'number',
            description: 'Average own switch ownership percentage for the winning alliance during auto.',
            format: 'float'
        },
        winning_own_switch_ownership_percentage_teleop: {
            type: 'number',
            description: 'Average own switch ownership percentage for the winning alliance during teleop.',
            format: 'float'
        },
        winning_scale_ownership_percentage: {
            type: 'number',
            description: 'Average scale ownership percentage for the winning alliance.',
            format: 'float'
        },
        winning_scale_ownership_percentage_auto: {
            type: 'number',
            description: 'Average scale ownership percentage for the winning alliance during auto.',
            format: 'float'
        },
        winning_scale_ownership_percentage_teleop: {
            type: 'number',
            description: 'Average scale ownership percentage for the winning alliance during teleop.',
            format: 'float'
        }
    },
    description: 'Insights for FIRST Power Up qualification and elimination matches.'
} as const;

export const $Event_OPRs = {
    type: 'object',
    properties: {
        oprs: {
            type: 'object',
            additionalProperties: {
                type: 'number',
                description: 'OPR for team.',
                format: 'float'
            },
            description: 'A key-value pair with team key (eg `frc254`) as key and OPR as value.'
        },
        dprs: {
            type: 'object',
            additionalProperties: {
                type: 'number',
                description: 'DPR for team.',
                format: 'float'
            },
            description: 'A key-value pair with team key (eg `frc254`) as key and DPR as value.'
        },
        ccwms: {
            type: 'object',
            additionalProperties: {
                type: 'number',
                description: 'CCWM for team.',
                format: 'float'
            },
            description: 'A key-value pair with team key (eg `frc254`) as key and CCWM as value.'
        }
    },
    description: 'OPR, DPR, and CCWM for teams at the event.'
} as const;

export const $Event_Predictions = {
    type: 'object',
    description: 'JSON Object containing prediction information for the event. Contains year-specific information and is subject to change.'
} as const;

export const $Match_Simple = {
    required: ['comp_level', 'event_key', 'key', 'match_number', 'set_number'],
    type: 'object',
    properties: {
        key: {
            type: 'string',
            description: 'TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may append the competition level if more than one match in required per set.'
        },
        comp_level: {
            type: 'string',
            description: 'The competition level the match was played at.',
            enum: ['qm', 'ef', 'qf', 'sf', 'f']
        },
        set_number: {
            type: 'integer',
            description: 'The set number in a series of matches where more than one match is required in the match series.'
        },
        match_number: {
            type: 'integer',
            description: 'The match number of the match in the competition level.'
        },
        alliances: {
            type: 'object',
            properties: {
                red: {
                    '$ref': '#/components/schemas/Match_alliance'
                },
                blue: {
                    '$ref': '#/components/schemas/Match_alliance'
                }
            },
            description: 'A list of alliances, the teams on the alliances, and their score.'
        },
        winning_alliance: {
            type: 'string',
            description: 'The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.',
            enum: ['red', 'blue', '']
        },
        event_key: {
            type: 'string',
            description: 'Event key of the event the match was played at.'
        },
        time: {
            type: 'integer',
            description: 'UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.',
            format: 'int64'
        },
        predicted_time: {
            type: 'integer',
            description: 'UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.',
            format: 'int64'
        },
        actual_time: {
            type: 'integer',
            description: 'UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.',
            format: 'int64'
        }
    }
} as const;

export const $Match = {
    required: ['comp_level', 'event_key', 'key', 'match_number', 'set_number'],
    type: 'object',
    properties: {
        key: {
            type: 'string',
            description: 'TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.'
        },
        comp_level: {
            type: 'string',
            description: 'The competition level the match was played at.',
            enum: ['qm', 'ef', 'qf', 'sf', 'f']
        },
        set_number: {
            type: 'integer',
            description: 'The set number in a series of matches where more than one match is required in the match series.'
        },
        match_number: {
            type: 'integer',
            description: 'The match number of the match in the competition level.'
        },
        alliances: {
            type: 'object',
            properties: {
                red: {
                    '$ref': '#/components/schemas/Match_alliance'
                },
                blue: {
                    '$ref': '#/components/schemas/Match_alliance'
                }
            },
            description: 'A list of alliances, the teams on the alliances, and their score.'
        },
        winning_alliance: {
            type: 'string',
            description: 'The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.',
            enum: ['red', 'blue', '']
        },
        event_key: {
            type: 'string',
            description: 'Event key of the event the match was played at.'
        },
        time: {
            type: 'integer',
            description: 'UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.',
            format: 'int64'
        },
        actual_time: {
            type: 'integer',
            description: 'UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.',
            format: 'int64'
        },
        predicted_time: {
            type: 'integer',
            description: 'UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.',
            format: 'int64'
        },
        post_result_time: {
            type: 'integer',
            description: 'UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted.',
            format: 'int64'
        },
        score_breakdown: {
            type: 'object',
            properties: {},
            description: 'Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null.'
        },
        videos: {
            type: 'array',
            description: 'Array of video objects associated with this match.',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        description: "Can be one of 'youtube' or 'tba'"
                    },
                    key: {
                        type: 'string',
                        description: 'Unique key representing this video'
                    }
                }
            }
        }
    }
} as const;

export const $Match_alliance = {
    required: ['score', 'team_keys'],
    type: 'object',
    properties: {
        score: {
            type: 'integer',
            description: 'Score for this alliance. Will be null or -1 for an unplayed match.'
        },
        team_keys: {
            type: 'array',
            items: {
                type: 'string',
                description: 'TBA Team keys (eg `frc254`) for teams on this alliance.'
            }
        },
        surrogate_team_keys: {
            type: 'array',
            description: 'TBA team keys (eg `frc254`) of any teams playing as a surrogate.',
            items: {
                type: 'string',
                description: 'Team key of a surrogate team.'
            }
        },
        dq_team_keys: {
            type: 'array',
            description: 'TBA team keys (eg `frc254`) of any disqualified teams.',
            items: {
                type: 'string',
                description: 'Team key of a disqualified team.'
            }
        }
    }
} as const;

export const $Zebra = {
    required: ['key', 'times', 'alliances'],
    type: 'object',
    properties: {
        key: {
            type: 'string',
            description: 'TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.'
        },
        times: {
            type: 'array',
            description: 'A list of relative timestamps for each data point. Each timestamp will correspond to the X and Y value at the same index in a team xs and ys arrays. `times`, all teams `xs` and all teams `ys` are guarenteed to be the same length.',
            items: {
                type: 'number',
                format: 'double',
                example: [0, 0.1, 0.2]
            }
        },
        alliances: {
            type: 'object',
            properties: {
                red: {
                    type: 'array',
                    description: 'Zebra MotionWorks data for teams on the red alliance',
                    items: {
                        '$ref': '#/components/schemas/Zebra_team'
                    }
                },
                blue: {
                    type: 'array',
                    description: 'Zebra data for teams on the blue alliance',
                    items: {
                        '$ref': '#/components/schemas/Zebra_team'
                    }
                }
            }
        }
    }
} as const;

export const $Zebra_team = {
    required: ['team_key', 'xs', 'ys'],
    type: 'object',
    properties: {
        team_key: {
            type: 'string',
            description: 'The TBA team key for the Zebra MotionWorks data.',
            example: 'frc7332'
        },
        xs: {
            type: 'array',
            description: 'A list containing doubles and nulls representing a teams X position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.',
            items: {
                type: 'number',
                format: 'double',
                example: [2.73, 2.7, null]
            }
        },
        ys: {
            type: 'array',
            description: 'A list containing doubles and nulls representing a teams Y position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.',
            items: {
                type: 'number',
                format: 'double',
                example: [2.73, 2.7, null]
            }
        }
    }
} as const;

export const $Match_Score_Breakdown_2015 = {
    type: 'object',
    properties: {
        blue: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2015_Alliance'
        },
        red: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2015_Alliance'
        },
        coopertition: {
            type: 'string',
            enum: ['None', 'Unknown', 'Stack']
        },
        coopertition_points: {
            type: 'integer'
        }
    },
    description: 'See the 2015 FMS API documentation for a description of each value'
} as const;

export const $Match_Score_Breakdown_2015_Alliance = {
    type: 'object',
    properties: {
        auto_points: {
            type: 'integer'
        },
        teleop_points: {
            type: 'integer'
        },
        container_points: {
            type: 'integer'
        },
        tote_points: {
            type: 'integer'
        },
        litter_points: {
            type: 'integer'
        },
        foul_points: {
            type: 'integer'
        },
        adjust_points: {
            type: 'integer'
        },
        total_points: {
            type: 'integer'
        },
        foul_count: {
            type: 'integer'
        },
        tote_count_far: {
            type: 'integer'
        },
        tote_count_near: {
            type: 'integer'
        },
        tote_set: {
            type: 'boolean'
        },
        tote_stack: {
            type: 'boolean'
        },
        container_count_level1: {
            type: 'integer'
        },
        container_count_level2: {
            type: 'integer'
        },
        container_count_level3: {
            type: 'integer'
        },
        container_count_level4: {
            type: 'integer'
        },
        container_count_level5: {
            type: 'integer'
        },
        container_count_level6: {
            type: 'integer'
        },
        container_set: {
            type: 'boolean'
        },
        litter_count_container: {
            type: 'integer'
        },
        litter_count_landfill: {
            type: 'integer'
        },
        litter_count_unprocessed: {
            type: 'integer'
        },
        robot_set: {
            type: 'boolean'
        }
    }
} as const;

export const $Match_Score_Breakdown_2016 = {
    type: 'object',
    properties: {
        blue: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2016_Alliance'
        },
        red: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2016_Alliance'
        }
    },
    description: 'See the 2016 FMS API documentation for a description of each value.'
} as const;

export const $Match_Score_Breakdown_2016_Alliance = {
    type: 'object',
    properties: {
        autoPoints: {
            type: 'integer'
        },
        teleopPoints: {
            type: 'integer'
        },
        breachPoints: {
            type: 'integer'
        },
        foulPoints: {
            type: 'integer'
        },
        capturePoints: {
            type: 'integer'
        },
        adjustPoints: {
            type: 'integer'
        },
        totalPoints: {
            type: 'integer'
        },
        robot1Auto: {
            type: 'string',
            enum: ['Crossed', 'Reached', 'None']
        },
        robot2Auto: {
            type: 'string',
            enum: ['Crossed', 'Reached', 'None']
        },
        robot3Auto: {
            type: 'string',
            enum: ['Crossed', 'Reached', 'None']
        },
        autoReachPoints: {
            type: 'integer'
        },
        autoCrossingPoints: {
            type: 'integer'
        },
        autoBouldersLow: {
            type: 'integer'
        },
        autoBouldersHigh: {
            type: 'integer'
        },
        autoBoulderPoints: {
            type: 'integer'
        },
        teleopCrossingPoints: {
            type: 'integer'
        },
        teleopBouldersLow: {
            type: 'integer'
        },
        teleopBouldersHigh: {
            type: 'integer'
        },
        teleopBoulderPoints: {
            type: 'integer'
        },
        teleopDefensesBreached: {
            type: 'boolean'
        },
        teleopChallengePoints: {
            type: 'integer'
        },
        teleopScalePoints: {
            type: 'integer'
        },
        teleopTowerCaptured: {
            type: 'integer'
        },
        towerFaceA: {
            type: 'string'
        },
        towerFaceB: {
            type: 'string'
        },
        towerFaceC: {
            type: 'string'
        },
        towerEndStrength: {
            type: 'integer'
        },
        techFoulCount: {
            type: 'integer'
        },
        foulCount: {
            type: 'integer'
        },
        position2: {
            type: 'string'
        },
        position3: {
            type: 'string'
        },
        position4: {
            type: 'string'
        },
        position5: {
            type: 'string'
        },
        position1crossings: {
            type: 'integer'
        },
        position2crossings: {
            type: 'integer'
        },
        position3crossings: {
            type: 'integer'
        },
        position4crossings: {
            type: 'integer'
        },
        position5crossings: {
            type: 'integer'
        }
    }
} as const;

export const $Match_Score_Breakdown_2017 = {
    type: 'object',
    properties: {
        blue: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2017_Alliance'
        },
        red: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2017_Alliance'
        }
    },
    description: 'See the 2017 FMS API documentation for a description of each value.'
} as const;

export const $Match_Score_Breakdown_2017_Alliance = {
    type: 'object',
    properties: {
        autoPoints: {
            type: 'integer'
        },
        teleopPoints: {
            type: 'integer'
        },
        foulPoints: {
            type: 'integer'
        },
        adjustPoints: {
            type: 'integer'
        },
        totalPoints: {
            type: 'integer'
        },
        robot1Auto: {
            type: 'string',
            enum: ['Unknown', 'Mobility', 'None']
        },
        robot2Auto: {
            type: 'string',
            enum: ['Unknown', 'Mobility', 'None']
        },
        robot3Auto: {
            type: 'string',
            enum: ['Unknown', 'Mobility', 'None']
        },
        rotor1Auto: {
            type: 'boolean'
        },
        rotor2Auto: {
            type: 'boolean'
        },
        autoFuelLow: {
            type: 'integer'
        },
        autoFuelHigh: {
            type: 'integer'
        },
        autoMobilityPoints: {
            type: 'integer'
        },
        autoRotorPoints: {
            type: 'integer'
        },
        autoFuelPoints: {
            type: 'integer'
        },
        teleopFuelPoints: {
            type: 'integer'
        },
        teleopFuelLow: {
            type: 'integer'
        },
        teleopFuelHigh: {
            type: 'integer'
        },
        teleopRotorPoints: {
            type: 'integer'
        },
        kPaRankingPointAchieved: {
            type: 'boolean'
        },
        teleopTakeoffPoints: {
            type: 'integer'
        },
        kPaBonusPoints: {
            type: 'integer'
        },
        rotorBonusPoints: {
            type: 'integer'
        },
        rotor1Engaged: {
            type: 'boolean'
        },
        rotor2Engaged: {
            type: 'boolean'
        },
        rotor3Engaged: {
            type: 'boolean'
        },
        rotor4Engaged: {
            type: 'boolean'
        },
        rotorRankingPointAchieved: {
            type: 'boolean'
        },
        techFoulCount: {
            type: 'integer'
        },
        foulCount: {
            type: 'integer'
        },
        touchpadNear: {
            type: 'string'
        },
        touchpadMiddle: {
            type: 'string'
        },
        touchpadFar: {
            type: 'string'
        }
    }
} as const;

export const $Match_Score_Breakdown_2018 = {
    type: 'object',
    properties: {
        blue: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2018_Alliance'
        },
        red: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2018_Alliance'
        }
    },
    description: 'See the 2018 FMS API documentation for a description of each value. https://frcevents2.docs.apiary.io/#/reference/match-results/score-details'
} as const;

export const $Match_Score_Breakdown_2018_Alliance = {
    type: 'object',
    properties: {
        adjustPoints: {
            type: 'integer'
        },
        autoOwnershipPoints: {
            type: 'integer'
        },
        autoPoints: {
            type: 'integer'
        },
        autoQuestRankingPoint: {
            type: 'boolean'
        },
        autoRobot1: {
            type: 'string'
        },
        autoRobot2: {
            type: 'string'
        },
        autoRobot3: {
            type: 'string'
        },
        autoRunPoints: {
            type: 'integer'
        },
        autoScaleOwnershipSec: {
            type: 'integer'
        },
        autoSwitchAtZero: {
            type: 'boolean'
        },
        autoSwitchOwnershipSec: {
            type: 'integer'
        },
        endgamePoints: {
            type: 'integer'
        },
        endgameRobot1: {
            type: 'string'
        },
        endgameRobot2: {
            type: 'string'
        },
        endgameRobot3: {
            type: 'string'
        },
        faceTheBossRankingPoint: {
            type: 'boolean'
        },
        foulCount: {
            type: 'integer'
        },
        foulPoints: {
            type: 'integer'
        },
        rp: {
            type: 'integer'
        },
        techFoulCount: {
            type: 'integer'
        },
        teleopOwnershipPoints: {
            type: 'integer'
        },
        teleopPoints: {
            type: 'integer'
        },
        teleopScaleBoostSec: {
            type: 'integer'
        },
        teleopScaleForceSec: {
            type: 'integer'
        },
        teleopScaleOwnershipSec: {
            type: 'integer'
        },
        teleopSwitchBoostSec: {
            type: 'integer'
        },
        teleopSwitchForceSec: {
            type: 'integer'
        },
        teleopSwitchOwnershipSec: {
            type: 'integer'
        },
        totalPoints: {
            type: 'integer'
        },
        vaultBoostPlayed: {
            type: 'integer'
        },
        vaultBoostTotal: {
            type: 'integer'
        },
        vaultForcePlayed: {
            type: 'integer'
        },
        vaultForceTotal: {
            type: 'integer'
        },
        vaultLevitatePlayed: {
            type: 'integer'
        },
        vaultLevitateTotal: {
            type: 'integer'
        },
        vaultPoints: {
            type: 'integer'
        },
        tba_gameData: {
            type: 'string',
            description: "Unofficial TBA-computed value of the FMS provided GameData given to the alliance teams at the start of the match. 3 Character String containing `L` and `R` only. The first character represents the near switch, the 2nd the scale, and the 3rd the far, opposing, switch from the alliance's perspective. An `L` in a position indicates the platform on the left will be lit for the alliance while an `R` will indicate the right platform will be lit for the alliance. See also [WPI Screen Steps](https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/826278-2018-game-data-details)."
        }
    }
} as const;

export const $Match_Timeseries_2018 = {
    type: 'object',
    properties: {
        event_key: {
            type: 'string',
            description: 'TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.'
        },
        match_id: {
            type: 'string',
            description: 'Match ID consisting of the level, match number, and set number, eg `qm45` or `f1m1`.'
        },
        mode: {
            type: 'string',
            description: 'Current mode of play, can be `pre_match`, `auto`, `telop`, or `post_match`.'
        },
        play: {
            type: 'integer'
        },
        time_remaining: {
            type: 'integer',
            description: 'Amount of time remaining in the match, only valid during `auto` and `teleop` modes.'
        },
        blue_auto_quest: {
            type: 'integer',
            description: '1 if the blue alliance is credited with the AUTO QUEST, 0 if not.'
        },
        blue_boost_count: {
            type: 'integer',
            description: 'Number of POWER CUBES in the BOOST section of the blue alliance VAULT.'
        },
        blue_boost_played: {
            type: 'integer',
            description: 'Returns 1 if the blue alliance BOOST was played, or 0 if not played.'
        },
        blue_current_powerup: {
            type: 'string',
            description: 'Name of the current blue alliance POWER UP being played, or `null`.'
        },
        blue_face_the_boss: {
            type: 'integer',
            description: '1 if the blue alliance is credited with FACING THE BOSS, 0 if not.'
        },
        blue_force_count: {
            type: 'integer',
            description: 'Number of POWER CUBES in the FORCE section of the blue alliance VAULT.'
        },
        blue_force_played: {
            type: 'integer',
            description: 'Returns 1 if the blue alliance FORCE was played, or 0 if not played.'
        },
        blue_levitate_count: {
            type: 'integer',
            description: 'Number of POWER CUBES in the LEVITATE section of the blue alliance VAULT.'
        },
        blue_levitate_played: {
            type: 'integer',
            description: 'Returns 1 if the blue alliance LEVITATE was played, or 0 if not played.'
        },
        blue_powerup_time_remaining: {
            type: 'string',
            description: 'Number of seconds remaining in the blue alliance POWER UP time, or 0 if none is active.'
        },
        blue_scale_owned: {
            type: 'integer',
            description: '1 if the blue alliance owns the SCALE, 0 if not.'
        },
        blue_score: {
            type: 'integer',
            description: 'Current score for the blue alliance.'
        },
        blue_switch_owned: {
            type: 'integer',
            description: '1 if the blue alliance owns their SWITCH, 0 if not.'
        },
        red_auto_quest: {
            type: 'integer',
            description: '1 if the red alliance is credited with the AUTO QUEST, 0 if not.'
        },
        red_boost_count: {
            type: 'integer',
            description: 'Number of POWER CUBES in the BOOST section of the red alliance VAULT.'
        },
        red_boost_played: {
            type: 'integer',
            description: 'Returns 1 if the red alliance BOOST was played, or 0 if not played.'
        },
        red_current_powerup: {
            type: 'string',
            description: 'Name of the current red alliance POWER UP being played, or `null`.'
        },
        red_face_the_boss: {
            type: 'integer',
            description: '1 if the red alliance is credited with FACING THE BOSS, 0 if not.'
        },
        red_force_count: {
            type: 'integer',
            description: 'Number of POWER CUBES in the FORCE section of the red alliance VAULT.'
        },
        red_force_played: {
            type: 'integer',
            description: 'Returns 1 if the red alliance FORCE was played, or 0 if not played.'
        },
        red_levitate_count: {
            type: 'integer',
            description: 'Number of POWER CUBES in the LEVITATE section of the red alliance VAULT.'
        },
        red_levitate_played: {
            type: 'integer',
            description: 'Returns 1 if the red alliance LEVITATE was played, or 0 if not played.'
        },
        red_powerup_time_remaining: {
            type: 'string',
            description: 'Number of seconds remaining in the red alliance POWER UP time, or 0 if none is active.'
        },
        red_scale_owned: {
            type: 'integer',
            description: '1 if the red alliance owns the SCALE, 0 if not.'
        },
        red_score: {
            type: 'integer',
            description: 'Current score for the red alliance.'
        },
        red_switch_owned: {
            type: 'integer',
            description: '1 if the red alliance owns their SWITCH, 0 if not.'
        }
    },
    description: `Timeseries data for the 2018 game *FIRST* POWER UP.
*WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
*WARNING:* This model is currently under active development and may change at any time, including in breaking ways.`
} as const;

export const $Match_Score_Breakdown_2019 = {
    type: 'object',
    properties: {
        blue: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2019_Alliance'
        },
        red: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2019_Alliance'
        }
    },
    description: 'See the 2019 FMS API documentation for a description of each value. https://frcevents2.docs.apiary.io/#/reference/match-results/score-details'
} as const;

export const $Match_Score_Breakdown_2019_Alliance = {
    type: 'object',
    properties: {
        adjustPoints: {
            type: 'integer'
        },
        autoPoints: {
            type: 'integer'
        },
        bay1: {
            type: 'string'
        },
        bay2: {
            type: 'string'
        },
        bay3: {
            type: 'string'
        },
        bay4: {
            type: 'string'
        },
        bay5: {
            type: 'string'
        },
        bay6: {
            type: 'string'
        },
        bay7: {
            type: 'string'
        },
        bay8: {
            type: 'string'
        },
        cargoPoints: {
            type: 'integer'
        },
        completeRocketRankingPoint: {
            type: 'boolean'
        },
        completedRocketFar: {
            type: 'boolean'
        },
        completedRocketNear: {
            type: 'boolean'
        },
        endgameRobot1: {
            type: 'string'
        },
        endgameRobot2: {
            type: 'string'
        },
        endgameRobot3: {
            type: 'string'
        },
        foulCount: {
            type: 'integer'
        },
        foulPoints: {
            type: 'integer'
        },
        habClimbPoints: {
            type: 'integer'
        },
        habDockingRankingPoint: {
            type: 'boolean'
        },
        habLineRobot1: {
            type: 'string'
        },
        habLineRobot2: {
            type: 'string'
        },
        habLineRobot3: {
            type: 'string'
        },
        hatchPanelPoints: {
            type: 'integer'
        },
        lowLeftRocketFar: {
            type: 'string'
        },
        lowLeftRocketNear: {
            type: 'string'
        },
        lowRightRocketFar: {
            type: 'string'
        },
        lowRightRocketNear: {
            type: 'string'
        },
        midLeftRocketFar: {
            type: 'string'
        },
        midLeftRocketNear: {
            type: 'string'
        },
        midRightRocketFar: {
            type: 'string'
        },
        midRightRocketNear: {
            type: 'string'
        },
        preMatchBay1: {
            type: 'string'
        },
        preMatchBay2: {
            type: 'string'
        },
        preMatchBay3: {
            type: 'string'
        },
        preMatchBay6: {
            type: 'string'
        },
        preMatchBay7: {
            type: 'string'
        },
        preMatchBay8: {
            type: 'string'
        },
        preMatchLevelRobot1: {
            type: 'string'
        },
        preMatchLevelRobot2: {
            type: 'string'
        },
        preMatchLevelRobot3: {
            type: 'string'
        },
        rp: {
            type: 'integer'
        },
        sandStormBonusPoints: {
            type: 'integer'
        },
        techFoulCount: {
            type: 'integer'
        },
        teleopPoints: {
            type: 'integer'
        },
        topLeftRocketFar: {
            type: 'string'
        },
        topLeftRocketNear: {
            type: 'string'
        },
        topRightRocketFar: {
            type: 'string'
        },
        topRightRocketNear: {
            type: 'string'
        },
        totalPoints: {
            type: 'integer'
        }
    }
} as const;

export const $Match_Score_Breakdown_2020 = {
    type: 'object',
    properties: {
        blue: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2020_Alliance'
        },
        red: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2020_Alliance'
        }
    },
    description: 'See the 2020 FMS API documentation for a description of each value. https://frcevents2.docs.apiary.io/#/reference/match-results/score-details'
} as const;

export const $Match_Score_Breakdown_2020_Alliance = {
    type: 'object',
    properties: {
        initLineRobot1: {
            type: 'string'
        },
        endgameRobot1: {
            type: 'string'
        },
        initLineRobot2: {
            type: 'string'
        },
        endgameRobot2: {
            type: 'string'
        },
        initLineRobot3: {
            type: 'string'
        },
        endgameRobot3: {
            type: 'string'
        },
        autoCellsBottom: {
            type: 'integer'
        },
        autoCellsOuter: {
            type: 'integer'
        },
        autoCellsInner: {
            type: 'integer'
        },
        teleopCellsBottom: {
            type: 'integer'
        },
        teleopCellsOuter: {
            type: 'integer'
        },
        teleopCellsInner: {
            type: 'integer'
        },
        stage1Activated: {
            type: 'boolean'
        },
        stage2Activated: {
            type: 'boolean'
        },
        stage3Activated: {
            type: 'boolean'
        },
        stage3TargetColor: {
            type: 'string'
        },
        endgameRungIsLevel: {
            type: 'string'
        },
        autoInitLinePoints: {
            type: 'integer'
        },
        autoCellPoints: {
            type: 'integer'
        },
        autoPoints: {
            type: 'integer'
        },
        teleopCellPoints: {
            type: 'integer'
        },
        controlPanelPoints: {
            type: 'integer'
        },
        endgamePoints: {
            type: 'integer'
        },
        teleopPoints: {
            type: 'integer'
        },
        shieldOperationalRankingPoint: {
            type: 'boolean'
        },
        shieldEnergizedRankingPoint: {
            type: 'boolean'
        },
        tba_shieldEnergizedRankingPointFromFoul: {
            type: 'boolean',
            description: 'Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul.'
        },
        tba_numRobotsHanging: {
            type: 'integer',
            description: 'Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match.'
        },
        foulCount: {
            type: 'integer'
        },
        techFoulCount: {
            type: 'integer'
        },
        adjustPoints: {
            type: 'integer'
        },
        foulPoints: {
            type: 'integer'
        },
        rp: {
            type: 'integer'
        },
        totalPoints: {
            type: 'integer'
        }
    }
} as const;

export const $Match_Score_Breakdown_2022 = {
    type: 'object',
    properties: {
        blue: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2022_Alliance'
        },
        red: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2022_Alliance'
        }
    },
    description: 'See the 2022 FMS API documentation for a description of each value. https://frc-api-docs.firstinspires.org'
} as const;

export const $Match_Score_Breakdown_2022_Alliance = {
    type: 'object',
    properties: {
        taxiRobot1: {
            type: 'string',
            enum: ['Yes', 'No']
        },
        endgameRobot1: {
            type: 'string',
            enum: ['Traversal', 'High', 'Mid', 'Low', 'None']
        },
        taxiRobot2: {
            type: 'string',
            enum: ['Yes', 'No']
        },
        endgameRobot2: {
            type: 'string',
            enum: ['Traversal', 'High', 'Mid', 'Low', 'None']
        },
        taxiRobot3: {
            type: 'string',
            enum: ['Yes', 'No']
        },
        endgameRobot3: {
            type: 'string',
            enum: ['Traversal', 'High', 'Mid', 'Low', 'None']
        },
        autoCargoLowerNear: {
            type: 'integer'
        },
        autoCargoLowerFar: {
            type: 'integer'
        },
        autoCargoLowerBlue: {
            type: 'integer'
        },
        autoCargoLowerRed: {
            type: 'integer'
        },
        autoCargoUpperNear: {
            type: 'integer'
        },
        autoCargoUpperFar: {
            type: 'integer'
        },
        autoCargoUpperBlue: {
            type: 'integer'
        },
        autoCargoUpperRed: {
            type: 'integer'
        },
        autoCargoTotal: {
            type: 'integer'
        },
        teleopCargoLowerNear: {
            type: 'integer'
        },
        teleopCargoLowerFar: {
            type: 'integer'
        },
        teleopCargoLowerBlue: {
            type: 'integer'
        },
        teleopCargoLowerRed: {
            type: 'integer'
        },
        teleopCargoUpperNear: {
            type: 'integer'
        },
        teleopCargoUpperFar: {
            type: 'integer'
        },
        teleopCargoUpperBlue: {
            type: 'integer'
        },
        teleopCargoUpperRed: {
            type: 'integer'
        },
        teleopCargoTotal: {
            type: 'integer'
        },
        matchCargoTotal: {
            type: 'integer'
        },
        autoTaxiPoints: {
            type: 'integer'
        },
        autoCargoPoints: {
            type: 'integer'
        },
        autoPoints: {
            type: 'integer'
        },
        quintetAchieved: {
            type: 'boolean'
        },
        teleopCargoPoints: {
            type: 'integer'
        },
        endgamePoints: {
            type: 'integer'
        },
        teleopPoints: {
            type: 'integer'
        },
        cargoBonusRankingPoint: {
            type: 'boolean'
        },
        hangarBonusRankingPoint: {
            type: 'boolean'
        },
        foulCount: {
            type: 'integer'
        },
        techFoulCount: {
            type: 'integer'
        },
        adjustPoints: {
            type: 'integer'
        },
        foulPoints: {
            type: 'integer'
        },
        rp: {
            type: 'integer'
        },
        totalPoints: {
            type: 'integer'
        }
    }
} as const;

export const $Match_Score_Breakdown_2023 = {
    type: 'object',
    properties: {
        blue: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2023_Alliance'
        },
        red: {
            '$ref': '#/components/schemas/Match_Score_Breakdown_2023_Alliance'
        }
    },
    description: 'See the 2023 FMS API documentation for a description of each value. https://frc-api-docs.firstinspires.org'
} as const;

export const $Match_Score_Breakdown_2023_Alliance = {
    type: 'object',
    properties: {
        activationBonusAchieved: {
            type: 'boolean'
        },
        adjustPoints: {
            type: 'integer'
        },
        autoBridgeState: {
            type: 'string',
            enum: ['NotLevel', 'Level']
        },
        autoChargeStationPoints: {
            type: 'integer'
        },
        autoChargeStationRobot1: {
            type: 'string',
            enum: ['None', 'Docked']
        },
        autoChargeStationRobot2: {
            type: 'string',
            enum: ['None', 'Docked']
        },
        autoChargeStationRobot3: {
            type: 'string',
            enum: ['None', 'Docked']
        },
        autoDocked: {
            type: 'boolean'
        },
        autoCommunity: {
            type: 'object',
            properties: {
                B: {
                    type: 'array',
                    items: {
                        type: 'string',
                        enum: ['None', 'Cone', 'Cube']
                    }
                },
                M: {
                    type: 'array',
                    items: {
                        type: 'string',
                        enum: ['None', 'Cone', 'Cube']
                    }
                },
                T: {
                    type: 'array',
                    items: {
                        type: 'string',
                        enum: ['None', 'Cone', 'Cube']
                    }
                }
            }
        },
        autoGamePieceCount: {
            type: 'integer'
        },
        autoGamePiecePoints: {
            type: 'integer'
        },
        autoMobilityPoints: {
            type: 'integer'
        },
        mobilityRobot1: {
            type: 'string',
            enum: ['Yes', 'No']
        },
        mobilityRobot2: {
            type: 'string',
            enum: ['Yes', 'No']
        },
        mobilityRobot3: {
            type: 'string',
            enum: ['Yes', 'No']
        },
        autoPoints: {
            type: 'integer'
        },
        coopGamePieceCount: {
            type: 'integer'
        },
        coopertitionCriteriaMet: {
            type: 'boolean'
        },
        endGameBridgeState: {
            type: 'string',
            enum: ['NotLevel', 'Level']
        },
        endGameChargeStationPoints: {
            type: 'integer'
        },
        endGameChargeStationRobot1: {
            type: 'string',
            enum: ['None', 'Docked']
        },
        endGameChargeStationRobot2: {
            type: 'string',
            enum: ['None', 'Docked']
        },
        endGameChargeStationRobot3: {
            type: 'string',
            enum: ['None', 'Docked']
        },
        endGameParkPoints: {
            type: 'integer'
        },
        extraGamePieceCount: {
            type: 'integer'
        },
        foulCount: {
            type: 'integer'
        },
        foulPoints: {
            type: 'integer'
        },
        techFoulCount: {
            type: 'integer'
        },
        linkPoints: {
            type: 'integer'
        },
        links: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    nodes: {
                        type: 'array',
                        items: {
                            type: 'string',
                            enum: ['None', 'Cone', 'Cube']
                        }
                    },
                    row: {
                        type: 'string',
                        enum: ['Bottom', 'Mid', 'Top']
                    }
                }
            }
        },
        sustainabilityBonusAchieved: {
            type: 'boolean'
        },
        teleopCommunity: {
            type: 'object',
            properties: {
                B: {
                    type: 'array',
                    items: {
                        type: 'string',
                        enum: ['None', 'Cone', 'Cube']
                    }
                },
                M: {
                    type: 'array',
                    items: {
                        type: 'string',
                        enum: ['None', 'Cone', 'Cube']
                    }
                },
                T: {
                    type: 'array',
                    items: {
                        type: 'string',
                        enum: ['None', 'Cone', 'Cube']
                    }
                }
            }
        },
        teleopGamePieceCount: {
            type: 'integer'
        },
        teleopGamePiecePoints: {
            type: 'integer'
        },
        totalChargeStationPoints: {
            type: 'integer'
        },
        teleopPoints: {
            type: 'integer'
        },
        rp: {
            type: 'integer'
        },
        totalPoints: {
            type: 'integer'
        }
    }
} as const;

export const $Media = {
    required: ['type', 'foreign_key'],
    type: 'object',
    properties: {
        type: {
            type: 'string',
            description: 'String type of the media element.',
            enum: ['youtube', 'cdphotothread', 'imgur', 'facebook-profile', 'youtube-channel', 'twitter-profile', 'github-profile', 'instagram-profile', 'periscope-profile', 'gitlab-profile', 'grabcad', 'instagram-image', 'external-link', 'avatar']
        },
        foreign_key: {
            type: 'string',
            description: 'The key used to identify this media on the media site.'
        },
        details: {
            type: 'object',
            properties: {},
            description: 'If required, a JSON dict of additional media information.'
        },
        preferred: {
            type: 'boolean',
            description: 'True if the media is of high quality.'
        },
        direct_url: {
            type: 'string',
            description: 'Direct URL to the media.'
        },
        view_url: {
            type: 'string',
            description: 'The URL that leads to the full web page for the media, if one exists.'
        }
    },
    description: 'The `Media` object contains a reference for most any media associated with a team or event on TBA.'
} as const;

export const $Elimination_Alliance = {
    required: ['picks'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Alliance name, may be null.'
        },
        backup: {
            type: 'object',
            properties: {
                in: {
                    type: 'string',
                    description: 'Team key that was called in as the backup.'
                },
                out: {
                    type: 'string',
                    description: 'Team key that was replaced by the backup team.'
                }
            },
            description: 'Backup team called in, may be null.'
        },
        declines: {
            type: 'array',
            description: 'List of teams that declined the alliance.',
            items: {
                type: 'string',
                description: 'Team key that declined the alliance.'
            }
        },
        picks: {
            type: 'array',
            description: 'List of team keys picked for the alliance. First pick is captain.',
            items: {
                type: 'string',
                description: 'Team key picked for the alliance.'
            }
        },
        status: {
            type: 'object',
            properties: {
                playoff_average: {
                    type: 'number',
                    format: 'double'
                },
                level: {
                    type: 'string'
                },
                record: {
                    '$ref': '#/components/schemas/WLT_Record'
                },
                current_level_record: {
                    '$ref': '#/components/schemas/WLT_Record'
                },
                status: {
                    type: 'string'
                }
            }
        }
    }
} as const;

export const $Award = {
    required: ['award_type', 'event_key', 'name', 'recipient_list', 'year'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'The name of the award as provided by FIRST. May vary for the same award type.'
        },
        award_type: {
            type: 'integer',
            description: 'Type of award given. See https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/award_type.py#L6'
        },
        event_key: {
            type: 'string',
            description: 'The event_key of the event the award was won at.'
        },
        recipient_list: {
            type: 'array',
            description: "A list of recipients of the award at the event. May have either a team_key or an awardee, both, or neither (in the case the award wasn't awarded at the event).",
            items: {
                '$ref': '#/components/schemas/Award_Recipient'
            }
        },
        year: {
            type: 'integer',
            description: 'The year this award was won.'
        }
    }
} as const;

export const $Award_Recipient = {
    type: 'object',
    properties: {
        team_key: {
            type: 'string',
            description: 'The TBA team key for the team that was given the award. May be null.'
        },
        awardee: {
            type: 'string',
            description: 'The name of the individual given the award. May be null.'
        }
    },
    description: 'An `Award_Recipient` object represents the team and/or person who received an award at an event.'
} as const;

export const $District_List = {
    required: ['abbreviation', 'display_name', 'key', 'year'],
    type: 'object',
    properties: {
        abbreviation: {
            type: 'string',
            description: 'The short identifier for the district.'
        },
        display_name: {
            type: 'string',
            description: 'The long name for the district.'
        },
        key: {
            type: 'string',
            description: 'Key for this district, e.g. `2016ne`.'
        },
        year: {
            type: 'integer',
            description: 'Year this district participated.'
        }
    }
} as const;

export const $District_Ranking = {
    required: ['point_total', 'rank', 'team_key'],
    type: 'object',
    properties: {
        team_key: {
            type: 'string',
            description: 'TBA team key for the team.'
        },
        rank: {
            type: 'integer',
            description: 'Numerical rank of the team, 1 being top rank.'
        },
        rookie_bonus: {
            type: 'integer',
            description: 'Any points added to a team as a result of the rookie bonus.'
        },
        point_total: {
            type: 'integer',
            description: 'Total district points for the team.'
        },
        event_points: {
            type: 'array',
            description: 'List of events that contributed to the point total for the team.',
            items: {
                required: ['alliance_points', 'award_points', 'district_cmp', 'elim_points', 'event_key', 'qual_points', 'total'],
                type: 'object',
                properties: {
                    district_cmp: {
                        type: 'boolean',
                        description: `\`true\` if this event is a District Championship event.`
                    },
                    total: {
                        type: 'integer',
                        description: 'Total points awarded at this event.'
                    },
                    alliance_points: {
                        type: 'integer',
                        description: 'Points awarded for alliance selection.'
                    },
                    elim_points: {
                        type: 'integer',
                        description: 'Points awarded for elimination match performance.'
                    },
                    award_points: {
                        type: 'integer',
                        description: 'Points awarded for event awards.'
                    },
                    event_key: {
                        type: 'string',
                        description: 'TBA Event key for this event.'
                    },
                    qual_points: {
                        type: 'integer',
                        description: 'Points awarded for qualification match performance.'
                    }
                }
            }
        }
    },
    description: 'Rank of a team in a district.'
} as const;

export const $WLT_Record = {
    required: ['losses', 'ties', 'wins'],
    type: 'object',
    properties: {
        losses: {
            type: 'integer',
            description: 'Number of losses.'
        },
        wins: {
            type: 'integer',
            description: 'Number of wins.'
        },
        ties: {
            type: 'integer',
            description: 'Number of ties.'
        }
    },
    description: 'A Win-Loss-Tie record for a team, or an alliance.'
} as const;

export const $Webcast = {
    required: ['channel', 'type'],
    type: 'object',
    properties: {
        type: {
            type: 'string',
            description: 'Type of webcast, typically descriptive of the streaming provider.',
            enum: ['youtube', 'twitch', 'ustream', 'iframe', 'html5', 'rtmp', 'livestream', 'direct_link', 'mms', 'justin', 'stemtv', 'dacast']
        },
        channel: {
            type: 'string',
            description: 'Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe.'
        },
        date: {
            type: 'string',
            description: 'The date for the webcast in `yyyy-mm-dd` format. May be null.'
        },
        file: {
            type: 'string',
            description: 'File identification as may be required for some types. May be null.'
        }
    }
} as const;